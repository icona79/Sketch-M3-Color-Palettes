{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://exports/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://exports/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://exports/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://exports/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://exports/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/blend/blend.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/hct/cam16.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/hct/hct.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/hct/hct_solver.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/hct/viewing_conditions.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/index.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/palettes/core_palette.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/palettes/tonal_palette.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/lab_point_provider.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/point_provider.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/quantizer_celebi.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/quantizer_map.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/quantizer_wsmeans.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/quantize/quantizer_wu.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/scheme/scheme.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/scheme/scheme_android.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/score/score.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/utils/color_utils.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/utils/image_utils.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/utils/math_utils.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/utils/string_utils.js","webpack://exports/./node_modules/@material/material-color-utilities/dist/utils/theme_utils.js","webpack://exports/./node_modules/@skpm/fs/index.js","webpack://exports/./node_modules/@skpm/fs/utils.js","webpack://exports/./node_modules/@skpm/promise/index.js","webpack://exports/./src/script.js","webpack://exports/external \"buffer\"","webpack://exports/external \"os\"","webpack://exports/external \"path\"","webpack://exports/external \"sketch\"","webpack://exports/external \"sketch/dom\"","webpack://exports/external \"util\""],"names":["fs","require","os","path","desktopDir","join","homedir","sketch","Swatch","Style","doc","context","document","getSelectedDocument","firstSelectedLayer","selectedLayers","layers","artboard","Artboard","data","sketchObject","documentData","image","Image","layerStyles","sharedLayerStyles","textStyles","sharedTextStyles","arrayLayerStyleIDs","map","sharedstyle","arrayLayerStyleNames","arrayLayerStyleStyles","layerStylesOrdered","sort","left","right","name","arrayTextStyleIDs","arrayTextStyleNames","arrayTextStyleStyles","textStylesOrdered","stylesString","JSON","stringify","textString","defaultColor","theme","themeFromSourceColor","argbFromHex","primary","secondary","hexFromArgb","schemes","light","tertiary","error","neutral","neutralVariant","shadow","scrim","primaryPalette","colorPalette","paletteToColorVariables","secondaryPalette","tertiaryPalette","errorPalette","neutralPalette","neutralVariantPalette","shadowPalette","scrimPalette","lightTheme_primary","lightTheme_onPrimary","onPrimary","lightTheme_primaryContainer","primaryContainer","lightTheme_onPrimaryContainer","onPrimaryContainer","lightTheme_secondary","lightTheme_onSecondary","onSecondary","lightTheme_secondaryContainer","secondaryContainer","lightTheme_onSecondaryContainer","onSecondaryContainer","lightTheme_tertiary","lightTheme_onTertiary","onTertiary","lightTheme_tertiaryContainer","tertiaryContainer","lightTheme_onTertiaryContainer","onTertiaryContainer","lightTheme_error","lightTheme_onError","onError","lightTheme_errorContainer","errorContainer","lightTheme_onErrorContainer","onErrorContainer","lightTheme_background","background","lightTheme_onbackground","onbackground","lightTheme_surface","surface","lightTheme_onSurface","onSurface","lightTheme_outline","lightTheme_surfacevariant","surfaceVariant","lightTheme_onSurfaceVariant","onSurfaceVariant","lightTheme_shadow","lightTheme_scrim","lightTheme_inverseSurface","inverseSurface","lightTheme_inverseOnSurface","inverseOnSurface","lightTheme_inversePrimary","inversePrimary","lightTheme","darkTheme_primary","dark","darkTheme_onPrimary","darkTheme_primaryContainer","darkTheme_onPrimaryContainer","darkTheme_secondary","darkTheme_onSecondary","darkTheme_secondaryContainer","darkTheme_onSecondaryContainer","darkTheme_tertiary","darkTheme_onTertiary","darkTheme_tertiaryContainer","darkTheme_onTertiaryContainer","darkTheme_error","darkTheme_onError","darkTheme_errorContainer","darkTheme_onErrorContainer","darkTheme_background","darkTheme_onbackground","darkTheme_surface","darkTheme_onSurface","darkTheme_outline","darkTheme_surfacevariant","darkTheme_onSurfaceVariant","darkTheme_shadow","darkTheme_scrim","darkTheme_inverseSurface","darkTheme_inverseOnSurface","darkTheme_inversePrimary","darkTheme","forEach","style","createNewLayerStyle","createNewTextStyle","console","log","palette","arrayColorVarNames","swatches","color","colorName","newSwatch","from","length","indexOf","push","tones","n","valueName","toString","TonalPalette","fromInt","tone","getLayerStyleNameFromID","id","styleName","i","getTextStyleNameFromID","textStyle","getTextStylesStyleFromIDErr","getLayerStyleIDFromName","styleID","getTextStyleIDFromName","styleDetails","folder","border","styleColor","borders","fills","fillType","FillType","Color","position","BorderPosition","Inside","sharedStyle","updateLayerStyles","createLayerStyleErr","textColor","fontSize","fontFamily","fontWeight","updateTextStyles","sharedTitleStyle","createTextStyleErr"],"mappings":";;;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;;AAEA,wCAAwC,SAAS;AACjD;AACA;;AAEA;AACA;;AAEA,iH;;;;;;;;;;;ACVA,uBAAuB,mBAAO,CAAC,wFAAuB;;AAEtD;AACA;AACA;;AAEA,kH;;;;;;;;;;;ACNA;AACA;AACA;;AAEA,gH;;;;;;;;;;;ACJA;AACA;AACA;;AAEA,kH;;;;;;;;;;;ACJA,wBAAwB,mBAAO,CAAC,0FAAwB;;AAExD,sBAAsB,mBAAO,CAAC,sFAAsB;;AAEpD,iCAAiC,mBAAO,CAAC,4GAAiC;;AAE1E,wBAAwB,mBAAO,CAAC,0FAAwB;;AAExD;AACA;AACA;;AAEA,kH;;;;;;;;;;;ACZA,uBAAuB,mBAAO,CAAC,wFAAuB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2H;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqC;AACJ;AACkB;AACF;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAG;AAC3B,sBAAsB,4CAAG;AACzB,kCAAkC,mEAA2B;AAC7D;AACA,0BAA0B,uEAA+B;AACzD,8BAA8B,mEAA2B;AACzD,eAAe,4CAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAK;AAC5B,wBAAwB,gDAAK;AAC7B,wBAAwB,4CAAG,kCAAkC,gEAAwB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,wBAAwB,gDAAK;AAC7B,sBAAsB,gDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAK;AACpB;AACA;AACA,iC;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACF;AACa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gBAAgB,OAAO,MAAM,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qEAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6DAAgB;AACrC,uBAAuB,6DAAgB;AACvC,sBAAsB,6DAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAW;AAC/B,oBAAoB,wDAAW;AAC/B,oBAAoB,wDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qEAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,qEAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA,mBAAmB,wDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAAiB;AACtC;AACA;AACA;AACA,iC;;;;;;;;;;;;ACrQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACd;AACS;AACzC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA,4BAA4B,gEAAmB;AAC/C;AACA;AACA;AACA,uBAAuB,qDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA;AACA,oBAAoB,4CAAK;AACzB;AACA;AACA,4BAA4B,gEAAmB;AAC/C;AACA;AACA;AACA,+B;;;;;;;;;;;;AC3GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmD;AACF;AACjB;AACyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gEAAwB;AACvuBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wDAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qEAAiB;AACnD;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iEAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,mBAAmB,gEAAwB;AAC3C;AACA,qBAAqB,uEAA+B;AACpD;AACA,kBAAkB,6DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,eAAe,4CAAK;AACpsC;;;;;;;;;;;;AClgBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACF;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAmB,4CAA4C,6DAAgB;AAC5G;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS;AACtC,YAAY,sDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;ACpe;AACD;AACC;AACG;AACH;AACI;AACL;AACR;AACQ;AACV;AACM;AACD;AACE;AACD;AACA;AACpC,iC;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiC;AACc;AAC/C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,4CAAG;AACvB;AACA;AACA;AACA,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC;AACA;AACA,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC,sBAAsB,2DAAY;AAClC;AACA,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiC;AACjC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAG;AACtB;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;AACoB;AAC9C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuD;AACV;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAW;AAClC;AACA,eAAe,mEAAgB;AAC/B;AACA;AACA,4C;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA,0BAA0B,gEAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oEAAgB;AAClD;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,+BAA+B,4BAA4B;AAC3D,2BAA2B,kBAAkB;AAC7C,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;ACjNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACC;AAC/C;AACA,uBAAuB;AACvB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD,oCAAoC,qBAAqB;AACzD,oCAAoC,qBAAqB;AACzD,oCAAoC,qBAAqB;AACzD,mCAAmC,qBAAqB;AACxD,6BAA6B,2DAAY;AACzC;AACA,wBAAwB,8DAAiB;AACzC,0BAA0B,gEAAmB;AAC7C,yBAAyB,+DAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,qCAAqC,sBAAsB;AAC3D,sCAAsC,sBAAsB;AAC5D,sCAAsC,sBAAsB;AAC5D,sCAAsC,sBAAsB;AAC5D,sCAAsC,sBAAsB;AAC5D,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrwC;;;;;;;;;;;;ACtXA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuD;AACvkEAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kEAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kEAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,kC;;;;;;;;;;;;ACxNA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuD;AACvD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,0C;;;;;;;;;;;;ACvMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqC;AACS;AACF;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD,oCAAoC,oEAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AChJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,0DAAwB;AACnoDAAkB;AAC7B;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACpQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+D;AACxB;AACK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gEAAW;AAChC;AACA;AACA;AACA,mBAAmB,0EAAe;AAClC,mBAAmB,kDAAK;AACxB;AACA;AACA;AACA,uC;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,cAAc,wDAAsB;AACpC,cAAc,0DAAwB;AACtC,cAAc,yDAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuC;AACgB;AACb;AACW;AACR;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,kEAAW;AAC/B;AACA;AACA;AACA,mBAAmB,qDAAM;AACzB,kBAAkB,qDAAM;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yBAAyB,yEAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gBAAgB,kDAAK;AACrB;AACA,oBAAoB,kEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW,GAAG,WAAW,EAAE,KAAK;AAClF,8BAA8B,iEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAW;AACjC,mDAAmD,MAAM,EAAE,OAAO;AAClE;AACA;AACA,uC;;;;;;;;;;;AChIA;AACA;AACA,aAAa,mBAAO,CAAC,sBAAQ;AAC7B,YAAY,mBAAO,CAAC,iDAAS;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,mBAAO,CAAC,iDAAS;AACvC;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9JA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,kBAAkB;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,SAAS;AAC9C;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AA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","file":"__script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/script.js\");\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport { Cam16 } from '../hct/cam16';\nimport { Hct } from '../hct/hct';\nimport * as colorUtils from '../utils/color_utils';\nimport * as mathUtils from '../utils/math_utils';\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n    /**\n     * Blend the design color's HCT hue towards the key color's HCT\n     * hue, in a way that leaves the original color recognizable and\n     * recognizably shifted towards the key color.\n     *\n     * @param designColor ARGB representation of an arbitrary color.\n     * @param sourceColor ARGB representation of the main theme color.\n     * @return The design color with a hue shifted towards the\n     * system's color, a slightly warmer/cooler variant of the design\n     * color's hue.\n     */\n    static harmonize(designColor, sourceColor) {\n        const fromHct = Hct.fromInt(designColor);\n        const toHct = Hct.fromInt(sourceColor);\n        const differenceDegrees = mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\n        const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n        const outputHue = mathUtils.sanitizeDegreesDouble(fromHct.hue +\n            rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));\n        return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n    }\n    /**\n     * Blends hue from one color into another. The chroma and tone of\n     * the original color are maintained.\n     *\n     * @param from ARGB representation of color\n     * @param to ARGB representation of color\n     * @param amount how much blending to perform; 0.0 >= and <= 1.0\n     * @return from, with a hue blended towards to. Chroma and tone\n     * are constant.\n     */\n    static hctHue(from, to, amount) {\n        const ucs = Blend.cam16Ucs(from, to, amount);\n        const ucsCam = Cam16.fromInt(ucs);\n        const fromCam = Cam16.fromInt(from);\n        const blended = Hct.from(ucsCam.hue, fromCam.chroma, colorUtils.lstarFromArgb(from));\n        return blended.toInt();\n    }\n    /**\n     * Blend in CAM16-UCS space.\n     *\n     * @param from ARGB representation of color\n     * @param to ARGB representation of color\n     * @param amount how much blending to perform; 0.0 >= and <= 1.0\n     * @return from, blended towards to. Hue, chroma, and tone will\n     * change.\n     */\n    static cam16Ucs(from, to, amount) {\n        const fromCam = Cam16.fromInt(from);\n        const toCam = Cam16.fromInt(to);\n        const fromJ = fromCam.jstar;\n        const fromA = fromCam.astar;\n        const fromB = fromCam.bstar;\n        const toJ = toCam.jstar;\n        const toA = toCam.astar;\n        const toB = toCam.bstar;\n        const jstar = fromJ + (toJ - fromJ) * amount;\n        const astar = fromA + (toA - fromA) * amount;\n        const bstar = fromB + (toB - fromB) * amount;\n        return Cam16.fromUcs(jstar, astar, bstar).toInt();\n    }\n}\n//# sourceMappingURL=blend.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\nimport { ViewingConditions } from './viewing_conditions';\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n    /**\n     * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n     * the following combinations:\n     *      -  {j or q} and {c, m, or s} and hue\n     *      - jstar, astar, bstar\n     * Prefer using a static method that constructs from 3 of those dimensions.\n     * This constructor is intended for those methods to use to return all\n     * possible dimensions.\n     *\n     * @param hue\n     * @param chroma informally, colorfulness / color intensity. like saturation\n     *     in HSL, except perceptually accurate.\n     * @param j lightness\n     * @param q brightness; ratio of lightness to white point's lightness\n     * @param m colorfulness\n     * @param s saturation; ratio of chroma to white point's chroma\n     * @param jstar CAM16-UCS J coordinate\n     * @param astar CAM16-UCS a coordinate\n     * @param bstar CAM16-UCS b coordinate\n     */\n    constructor(hue, chroma, j, q, m, s, jstar, astar, bstar) {\n        this.hue = hue;\n        this.chroma = chroma;\n        this.j = j;\n        this.q = q;\n        this.m = m;\n        this.s = s;\n        this.jstar = jstar;\n        this.astar = astar;\n        this.bstar = bstar;\n    }\n    /**\n     * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n     * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n     * specification, and is used to measure distances between colors.\n     */\n    distance(other) {\n        const dJ = this.jstar - other.jstar;\n        const dA = this.astar - other.astar;\n        const dB = this.bstar - other.bstar;\n        const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n        const dE = 1.41 * Math.pow(dEPrime, 0.63);\n        return dE;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return CAM16 color, assuming the color was viewed in default viewing\n     *     conditions.\n     */\n    static fromInt(argb) {\n        return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     * @return CAM16 color.\n     */\n    static fromIntInViewingConditions(argb, viewingConditions) {\n        const red = (argb & 0x00ff0000) >> 16;\n        const green = (argb & 0x0000ff00) >> 8;\n        const blue = (argb & 0x000000ff);\n        const redL = utils.linearized(red);\n        const greenL = utils.linearized(green);\n        const blueL = utils.linearized(blue);\n        const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n        const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n        const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n        const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n        const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n        const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n        const rD = viewingConditions.rgbD[0] * rC;\n        const gD = viewingConditions.rgbD[1] * gC;\n        const bD = viewingConditions.rgbD[2] * bC;\n        const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n        const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n        const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n        const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n        const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n        const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n        const b = (rA + gA - 2.0 * bA) / 9.0;\n        const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n        const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n        const atan2 = Math.atan2(b, a);\n        const atanDegrees = (atan2 * 180.0) / Math.PI;\n        const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n            atanDegrees >= 360 ? atanDegrees - 360.0 :\n                atanDegrees;\n        const hueRadians = (hue * Math.PI) / 180.0;\n        const ac = p2 * viewingConditions.nbb;\n        const j = 100.0 *\n            Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n        const huePrime = hue < 20.14 ? hue + 360 : hue;\n        const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n        const p1 = (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n        const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n        const alpha = Math.pow(t, 0.9) *\n            Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n        const c = alpha * Math.sqrt(j / 100.0);\n        const m = c * viewingConditions.fLRoot;\n        const s = 50.0 *\n            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n        const astar = mstar * Math.cos(hueRadians);\n        const bstar = mstar * Math.sin(hueRadians);\n        return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n    }\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     */\n    static fromJch(j, c, h) {\n        return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n    static fromJchInViewingConditions(j, c, h, viewingConditions) {\n        const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n            (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n        const m = c * viewingConditions.fLRoot;\n        const alpha = c / Math.sqrt(j / 100.0);\n        const s = 50.0 *\n            Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n        const hueRadians = (h * Math.PI) / 180.0;\n        const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n        const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n        const astar = mstar * Math.cos(hueRadians);\n        const bstar = mstar * Math.sin(hueRadians);\n        return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n    }\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     */\n    static fromUcs(jstar, astar, bstar) {\n        return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n    static fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {\n        const a = astar;\n        const b = bstar;\n        const m = Math.sqrt(a * a + b * b);\n        const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n        const c = M / viewingConditions.fLRoot;\n        let h = Math.atan2(b, a) * (180.0 / Math.PI);\n        if (h < 0.0) {\n            h += 360.0;\n        }\n        const j = jstar / (1 - (jstar - 100) * 0.007);\n        return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n    }\n    /**\n     *  @return ARGB representation of color, assuming the color was viewed in\n     *     default viewing conditions, which are near-identical to the default\n     *     viewing conditions for sRGB.\n     */\n    toInt() {\n        return this.viewed(ViewingConditions.DEFAULT);\n    }\n    /**\n     * @param viewingConditions Information about the environment where the color\n     *     will be viewed.\n     * @return ARGB representation of color\n     */\n    viewed(viewingConditions) {\n        const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n            0.0 :\n            this.chroma / Math.sqrt(this.j / 100.0);\n        const t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n        const hRad = (this.hue * Math.PI) / 180.0;\n        const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n        const ac = viewingConditions.aw *\n            Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n        const p2 = ac / viewingConditions.nbb;\n        const hSin = Math.sin(hRad);\n        const hCos = Math.cos(hRad);\n        const gamma = (23.0 * (p2 + 0.305) * t) /\n            (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n        const a = gamma * hCos;\n        const b = gamma * hSin;\n        const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n        const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n            Math.pow(rCBase, 1.0 / 0.42);\n        const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n        const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n            Math.pow(gCBase, 1.0 / 0.42);\n        const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n        const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n            Math.pow(bCBase, 1.0 / 0.42);\n        const rF = rC / viewingConditions.rgbD[0];\n        const gF = gC / viewingConditions.rgbD[1];\n        const bF = bC / viewingConditions.rgbD[2];\n        const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n        const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n        const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n        const argb = utils.argbFromXyz(x, y, z);\n        return argb;\n    }\n}\n//# sourceMappingURL=cam16.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\nimport * as utils from '../utils/color_utils';\nimport { Cam16 } from './cam16';\nimport { HctSolver } from './hct_solver';\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n    constructor(argb) {\n        this.argb = argb;\n        const cam = Cam16.fromInt(argb);\n        this.internalHue = cam.hue;\n        this.internalChroma = cam.chroma;\n        this.internalTone = utils.lstarFromArgb(argb);\n        this.argb = argb;\n    }\n    static from(hue, chroma, tone) {\n        return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return HCT representation of a color in default viewing conditions\n     */\n    static fromInt(argb) {\n        return new Hct(argb);\n    }\n    toInt() {\n        return this.argb;\n    }\n    /**\n     * A number, in degrees, representing ex. red, orange, yellow, etc.\n     * Ranges from 0 <= hue < 360.\n     */\n    get hue() {\n        return this.internalHue;\n    }\n    /**\n     * @param newHue 0 <= newHue < 360; invalid values are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set hue(newHue) {\n        this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));\n    }\n    get chroma() {\n        return this.internalChroma;\n    }\n    /**\n     * @param newChroma 0 <= newChroma < ?\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set chroma(newChroma) {\n        this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));\n    }\n    /** Lightness. Ranges from 0 to 100. */\n    get tone() {\n        return this.internalTone;\n    }\n    /**\n     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */\n    set tone(newTone) {\n        this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));\n    }\n    setInternalState(argb) {\n        const cam = Cam16.fromInt(argb);\n        this.internalHue = cam.hue;\n        this.internalChroma = cam.chroma;\n        this.internalTone = utils.lstarFromArgb(argb);\n        this.argb = argb;\n    }\n}\n//# sourceMappingURL=hct.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport * as colorUtils from '../utils/color_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { Cam16 } from './cam16';\nimport { ViewingConditions } from './viewing_conditions';\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n    /**\n     * Sanitizes a small enough angle in radians.\n     *\n     * @param angle An angle in radians; must not deviate too much\n     * from 0.\n     * @return A coterminal angle between 0 and 2pi.\n     */\n    static sanitizeRadians(angle) {\n        return (angle + Math.PI * 8) % (Math.PI * 2);\n    }\n    /**\n     * Delinearizes an RGB component, returning a floating-point\n     * number.\n     *\n     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n     * linear R/G/B channel\n     * @return 0.0 <= output <= 255.0, color channel converted to\n     * regular RGB space\n     */\n    static trueDelinearized(rgbComponent) {\n        const normalized = rgbComponent / 100.0;\n        let delinearized = 0.0;\n        if (normalized <= 0.0031308) {\n            delinearized = normalized * 12.92;\n        }\n        else {\n            delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n        }\n        return delinearized * 255.0;\n    }\n    static chromaticAdaptation(component) {\n        const af = Math.pow(Math.abs(component), 0.42);\n        return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n    }\n    /**\n     * Returns the hue of a linear RGB color in CAM16.\n     *\n     * @param linrgb The linear RGB coordinates of a color.\n     * @return The hue of the color in CAM16, in radians.\n     */\n    static hueOf(linrgb) {\n        const scaledDiscount = mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n        const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n        const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n        const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n        // redness-greenness\n        const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n        // yellowness-blueness\n        const b = (rA + gA - 2.0 * bA) / 9.0;\n        return Math.atan2(b, a);\n    }\n    static areInCyclicOrder(a, b, c) {\n        const deltaAB = HctSolver.sanitizeRadians(b - a);\n        const deltaAC = HctSolver.sanitizeRadians(c - a);\n        return deltaAB < deltaAC;\n    }\n    /**\n     * Solves the lerp equation.\n     *\n     * @param source The starting number.\n     * @param mid The number in the middle.\n     * @param target The ending number.\n     * @return A number t such that lerp(source, target, t) = mid.\n     */\n    static intercept(source, mid, target) {\n        return (mid - source) / (target - source);\n    }\n    static lerpPoint(source, t, target) {\n        return [\n            source[0] + (target[0] - source[0]) * t,\n            source[1] + (target[1] - source[1]) * t,\n            source[2] + (target[2] - source[2]) * t,\n        ];\n    }\n    /**\n     * Intersects a segment with a plane.\n     *\n     * @param source The coordinates of point A.\n     * @param coordinate The R-, G-, or B-coordinate of the plane.\n     * @param target The coordinates of point B.\n     * @param axis The axis the plane is perpendicular with. (0: R, 1:\n     * G, 2: B)\n     * @return The intersection point of the segment AB with the plane\n     * R=coordinate, G=coordinate, or B=coordinate\n     */\n    static setCoordinate(source, coordinate, target, axis) {\n        const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n        return HctSolver.lerpPoint(source, t, target);\n    }\n    static isBounded(x) {\n        return 0.0 <= x && x <= 100.0;\n    }\n    /**\n     * Returns the nth possible vertex of the polygonal intersection.\n     *\n     * @param y The Y value of the plane.\n     * @param n The zero-based index of the point. 0 <= n <= 11.\n     * @return The nth possible vertex of the polygonal intersection\n     * of the y plane and the RGB cube, in linear RGB coordinates, if\n     * it exists. If this possible vertex lies outside of the cube,\n     * [-1.0, -1.0, -1.0] is returned.\n     */\n    static nthVertex(y, n) {\n        const kR = HctSolver.Y_FROM_LINRGB[0];\n        const kG = HctSolver.Y_FROM_LINRGB[1];\n        const kB = HctSolver.Y_FROM_LINRGB[2];\n        const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n        const coordB = n % 2 === 0 ? 0.0 : 100.0;\n        if (n < 4) {\n            const g = coordA;\n            const b = coordB;\n            const r = (y - g * kG - b * kB) / kR;\n            if (HctSolver.isBounded(r)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n        else if (n < 8) {\n            const b = coordA;\n            const r = coordB;\n            const g = (y - r * kR - b * kB) / kG;\n            if (HctSolver.isBounded(g)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n        else {\n            const r = coordA;\n            const g = coordB;\n            const b = (y - r * kR - g * kG) / kB;\n            if (HctSolver.isBounded(b)) {\n                return [r, g, b];\n            }\n            else {\n                return [-1.0, -1.0, -1.0];\n            }\n        }\n    }\n    /**\n     * Finds the segment containing the desired color.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return A list of two sets of linear RGB coordinates, each\n     * corresponding to an endpoint of the segment containing the\n     * desired color.\n     */\n    static bisectToSegment(y, targetHue) {\n        let left = [-1.0, -1.0, -1.0];\n        let right = left;\n        let leftHue = 0.0;\n        let rightHue = 0.0;\n        let initialized = false;\n        let uncut = true;\n        for (let n = 0; n < 12; n++) {\n            const mid = HctSolver.nthVertex(y, n);\n            if (mid[0] < 0) {\n                continue;\n            }\n            const midHue = HctSolver.hueOf(mid);\n            if (!initialized) {\n                left = mid;\n                right = mid;\n                leftHue = midHue;\n                rightHue = midHue;\n                initialized = true;\n                continue;\n            }\n            if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n                uncut = false;\n                if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                    right = mid;\n                    rightHue = midHue;\n                }\n                else {\n                    left = mid;\n                    leftHue = midHue;\n                }\n            }\n        }\n        return [left, right];\n    }\n    static midpoint(a, b) {\n        return [\n            (a[0] + b[0]) / 2,\n            (a[1] + b[1]) / 2,\n            (a[2] + b[2]) / 2,\n        ];\n    }\n    static criticalPlaneBelow(x) {\n        return Math.floor(x - 0.5);\n    }\n    static criticalPlaneAbove(x) {\n        return Math.ceil(x - 0.5);\n    }\n    /**\n     * Finds a color with the given Y and hue on the boundary of the\n     * cube.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return The desired color, in linear RGB coordinates.\n     */\n    static bisectToLimit(y, targetHue) {\n        const segment = HctSolver.bisectToSegment(y, targetHue);\n        let left = segment[0];\n        let leftHue = HctSolver.hueOf(left);\n        let right = segment[1];\n        for (let axis = 0; axis < 3; axis++) {\n            if (left[axis] !== right[axis]) {\n                let lPlane = -1;\n                let rPlane = 255;\n                if (left[axis] < right[axis]) {\n                    lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));\n                    rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));\n                }\n                else {\n                    lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));\n                    rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));\n                }\n                for (let i = 0; i < 8; i++) {\n                    if (Math.abs(rPlane - lPlane) <= 1) {\n                        break;\n                    }\n                    else {\n                        const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n                        const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n                        const mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n                        const midHue = HctSolver.hueOf(mid);\n                        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                            right = mid;\n                            rPlane = mPlane;\n                        }\n                        else {\n                            left = mid;\n                            leftHue = midHue;\n                            lPlane = mPlane;\n                        }\n                    }\n                }\n            }\n        }\n        return HctSolver.midpoint(left, right);\n    }\n    static inverseChromaticAdaptation(adapted) {\n        const adaptedAbs = Math.abs(adapted);\n        const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n        return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n    }\n    /**\n     * Finds a color with the given hue, chroma, and Y.\n     *\n     * @param hueRadians The desired hue in radians.\n     * @param chroma The desired chroma.\n     * @param y The desired Y.\n     * @return The desired color as a hexadecimal integer, if found; 0\n     * otherwise.\n     */\n    static findResultByJ(hueRadians, chroma, y) {\n        // Initial estimate of j.\n        let j = Math.sqrt(y) * 11.0;\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        const viewingConditions = ViewingConditions.DEFAULT;\n        const tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n        const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n        const p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n        const hSin = Math.sin(hueRadians);\n        const hCos = Math.cos(hueRadians);\n        for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n            // ===========================================================\n            // Operations inlined from Cam16 to avoid repeated calculation\n            // ===========================================================\n            const jNormalized = j / 100.0;\n            const alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n            const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n            const ac = viewingConditions.aw *\n                Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n            const p2 = ac / viewingConditions.nbb;\n            const gamma = 23.0 * (p2 + 0.305) * t /\n                (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n            const a = gamma * hCos;\n            const b = gamma * hSin;\n            const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n            const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n            const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n            const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n            const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n            const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n            const linrgb = mathUtils.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);\n            // ===========================================================\n            // Operations inlined from Cam16 to avoid repeated calculation\n            // ===========================================================\n            if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n                return 0;\n            }\n            const kR = HctSolver.Y_FROM_LINRGB[0];\n            const kG = HctSolver.Y_FROM_LINRGB[1];\n            const kB = HctSolver.Y_FROM_LINRGB[2];\n            const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n            if (fnj <= 0) {\n                return 0;\n            }\n            if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n                if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n                    return 0;\n                }\n                return colorUtils.argbFromLinrgb(linrgb);\n            }\n            // Iterates with Newton method,\n            // Using 2 * fn(j) / j as the approximation of fn'(j)\n            j = j - (fnj - y) * j / (2 * fnj);\n        }\n        return 0;\n    }\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return A hexadecimal representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n    static solveToInt(hueDegrees, chroma, lstar) {\n        if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n            return colorUtils.argbFromLstar(lstar);\n        }\n        hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n        const hueRadians = hueDegrees / 180 * Math.PI;\n        const y = colorUtils.yFromLstar(lstar);\n        const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n        if (exactAnswer !== 0) {\n            return exactAnswer;\n        }\n        const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n        return colorUtils.argbFromLinrgb(linrgb);\n    }\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return An CAM16 object representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n    static solveToCam(hueDegrees, chroma, lstar) {\n        return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n    }\n}\nHctSolver.SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n        0.001200833568784504,\n        0.002389694492170889,\n        0.0002795742885861124,\n    ],\n    [\n        0.0005891086651375999,\n        0.0029785502573438758,\n        0.0003270666104008398,\n    ],\n    [\n        0.00010146692491640572,\n        0.0005364214359186694,\n        0.0032979401770712076,\n    ],\n];\nHctSolver.LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n        1373.2198709594231,\n        -1100.4251190754821,\n        -7.278681089101213,\n    ],\n    [\n        -271.815969077903,\n        559.6580465940733,\n        -32.46047482791194,\n    ],\n    [\n        1.9622899599665666,\n        -57.173814538844006,\n        308.7233197812385,\n    ],\n];\nHctSolver.Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\nHctSolver.CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,\n    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,\n    0.28835063437139563, 0.3188300904430532, 0.350925934958123,\n    0.3848314933096426, 0.42057480301049466, 0.458183274052838,\n    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,\n    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,\n    0.775853049866786, 0.829304845476233, 0.8848452951698498,\n    0.942497089126609, 1.0022825574869039, 1.0642236851973577,\n    1.1283421258858297, 1.1946592148522128, 1.2631959812511864,\n    1.3339731595349034, 1.407011200216447, 1.4823302800086415,\n    1.5599503113873272, 1.6398909516233677, 1.7221716113234105,\n    1.8068114625156377, 1.8938294463134073, 1.9832442801866852,\n    2.075074464868551, 2.1693382909216234, 2.2660538449872063,\n    2.36523901573795, 2.4669114995532007, 2.5710888059345764,\n    2.6777882626779785, 2.7870270208169257, 2.898822059350997,\n    3.0131901897720907, 3.1301480604002863, 3.2497121605402226,\n    3.3718988244681087, 3.4967242352587946, 3.624204428461639,\n    3.754355295633311, 3.887192587735158, 4.022731918402185,\n    4.160988767090289, 4.301978482107941, 4.445716283538092,\n    4.592217266055746, 4.741496401646282, 4.893568542229298,\n    5.048448422192488, 5.20615066083972, 5.3666897647573375,\n    5.5300801301023865, 5.696336044816294, 5.865471690767354,\n    6.037501145825082, 6.212438385869475, 6.390297286737924,\n    6.571091626112461, 6.7548350853498045, 6.941541251256611,\n    7.131223617812143, 7.323895587840543, 7.5195704746346665,\n    7.7182615035334345, 7.919981813454504, 8.124744458384042,\n    8.332562408825165, 8.543448553206703, 8.757415699253682,\n    8.974476575321063, 9.194643831691977, 9.417930041841839,\n    9.644347703669503, 9.873909240696694, 10.106627003236781,\n    10.342513269534024, 10.58158024687427, 10.8238400726681,\n    11.069304815507364, 11.317986476196008, 11.569896988756009,\n    11.825048221409341, 12.083451977536606, 12.345119996613247,\n    12.610063955123938, 12.878295467455942, 13.149826086772048,\n    13.42466730586372, 13.702830557985108, 13.984327217668513,\n    14.269168601521828, 14.55736596900856, 14.848930523210871,\n    15.143873411576273, 15.44220572664832, 15.743938506781891,\n    16.04908273684337, 16.35764934889634, 16.66964922287304,\n    16.985093187232053, 17.30399201960269, 17.62635644741625,\n    17.95219714852476, 18.281524751807332, 18.614349837764564,\n    18.95068293910138, 19.290534541298456, 19.633915083172692,\n    19.98083495742689, 20.331304511189067, 20.685334046541502,\n    21.042933821039977, 21.404114048223256, 21.76888489811322,\n    22.137256497705877, 22.50923893145328, 22.884842241736916,\n    23.264076429332462, 23.6469514538663, 24.033477234264016,\n    24.42366364919083, 24.817520537484558, 25.21505769858089,\n    25.61628489293138, 26.021211842414342, 26.429848230738664,\n    26.842203703840827, 27.258287870275353, 27.678110301598522,\n    28.10168053274597, 28.529008062403893, 28.96010235337422,\n    29.39497283293396, 29.83362889318845, 30.276079891419332,\n    30.722335150426627, 31.172403958865512, 31.62629557157785,\n    32.08401920991837, 32.54558406207592, 33.010999283389665,\n    33.4802739966603, 33.953417292456834, 34.430438229418264,\n    34.911345834551085, 35.39614910352207, 35.88485700094671,\n    36.37747846067349, 36.87402238606382, 37.37449765026789,\n    37.87891309649659, 38.38727753828926, 38.89959975977785,\n    39.41588851594697, 39.93615253289054, 40.460400508064545,\n    40.98864111053629, 41.520882981230194, 42.05713473317016,\n    42.597404951718396, 43.141702194811224, 43.6900349931913,\n    44.24241185063697, 44.798841244188324, 45.35933162437017,\n    45.92389141541209, 46.49252901546552, 47.065252796817916,\n    47.64207110610409, 48.22299226451468, 48.808024568002054,\n    49.3971762874833, 49.9904556690408, 50.587870934119984,\n    51.189430279724725, 51.79514187861014, 52.40501387947288,\n    53.0190544071392, 53.637271562750364, 54.259673423945976,\n    54.88626804504493, 55.517063457223934, 56.15206766869424,\n    56.79128866487574, 57.43473440856916, 58.08241284012621,\n    58.734331877617365, 59.39049941699807, 60.05092333227251,\n    60.715611475655585, 61.38457167773311, 62.057811747619894,\n    62.7353394731159, 63.417162620860914, 64.10328893648692,\n    64.79372614476921, 65.48848194977529, 66.18756403501224,\n    66.89098006357258, 67.59873767827808, 68.31084450182222,\n    69.02730813691093, 69.74813616640164, 70.47333615344107,\n    71.20291564160104, 71.93688215501312, 72.67524319850172,\n    73.41800625771542, 74.16517879925733, 74.9167682708136,\n    75.67278210128072, 76.43322770089146, 77.1981124613393,\n    77.96744375590167, 78.74122893956174, 79.51947534912904,\n    80.30219030335869, 81.08938110306934, 81.88105503125999,\n    82.67721935322541, 83.4778813166706, 84.28304815182372,\n    85.09272707154808, 85.90692527145302, 86.72564993000343,\n    87.54890820862819, 88.3767072518277, 89.2090541872801,\n    90.04595612594655, 90.88742016217518, 91.73345337380438,\n    92.58406282226491, 93.43925555268066, 94.29903859396902,\n    95.16341895893969, 96.03240364439274, 96.9059996312159,\n    97.78421388448044, 98.6670533535366, 99.55452497210776,\n];\n//# sourceMappingURL=hct_solver.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n    /**\n     * Parameters are intermediate values of the CAM16 conversion process. Their\n     * names are shorthand for technical color science terminology, this class\n     * would not benefit from documenting them individually. A brief overview\n     * is available in the CAM16 specification, and a complete overview requires\n     * a color science textbook, such as Fairchild's Color Appearance Models.\n     */\n    constructor(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {\n        this.n = n;\n        this.aw = aw;\n        this.nbb = nbb;\n        this.ncb = ncb;\n        this.c = c;\n        this.nc = nc;\n        this.rgbD = rgbD;\n        this.fl = fl;\n        this.fLRoot = fLRoot;\n        this.z = z;\n    }\n    /**\n     * Create ViewingConditions from a simple, physically relevant, set of\n     * parameters.\n     *\n     * @param whitePoint White point, measured in the XYZ color space.\n     *     default = D65, or sunny day afternoon\n     * @param adaptingLuminance The luminance of the adapting field. Informally,\n     *     how bright it is in the room where the color is viewed. Can be\n     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n     *     or 200 lux.\n     * @param backgroundLstar The lightness of the area surrounding the color.\n     *     measured by L* in L*a*b*. default = 50.0\n     * @param surround A general description of the lighting surrounding the\n     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n     *     dimly light room, like watching TV at home at night. 2.0 means there\n     *     is no difference between the lighting on the color and around it.\n     *     default = 2.0\n     * @param discountingIlluminant Whether the eye accounts for the tint of the\n     *     ambient lighting, such as knowing an apple is still red in green light.\n     *     default = false, the eye does not perform this process on\n     *       self-luminous objects like displays.\n     */\n    static make(whitePoint = utils.whitePointD65(), adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0, backgroundLstar = 50.0, surround = 2.0, discountingIlluminant = false) {\n        const xyz = whitePoint;\n        const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n        const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n        const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n        const f = 0.8 + surround / 10.0;\n        const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n            math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n        let d = discountingIlluminant ?\n            1.0 :\n            f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n        d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n        const nc = f;\n        const rgbD = [\n            d * (100.0 / rW) + 1.0 - d,\n            d * (100.0 / gW) + 1.0 - d,\n            d * (100.0 / bW) + 1.0 - d,\n        ];\n        const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n        const k4 = k * k * k * k;\n        const k4F = 1.0 - k4;\n        const fl = k4 * adaptingLuminance +\n            0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n        const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n        const z = 1.48 + Math.sqrt(n);\n        const nbb = 0.725 / Math.pow(n, 0.2);\n        const ncb = nbb;\n        const rgbAFactors = [\n            Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n            Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n            Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n        ];\n        const rgbA = [\n            (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n            (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n            (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n        ];\n        const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n        return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n    }\n}\n/** sRGB-like viewing conditions.  */\nViewingConditions.DEFAULT = ViewingConditions.make();\n//# sourceMappingURL=viewing_conditions.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './blend/blend';\nexport * from './hct/cam16';\nexport * from './hct/hct';\nexport * from './hct/viewing_conditions';\nexport * from './palettes/core_palette';\nexport * from './palettes/tonal_palette';\nexport * from './quantize/quantizer_celebi';\nexport * from './quantize/quantizer_map';\nexport * from './quantize/quantizer_wsmeans';\nexport * from './quantize/quantizer_wu';\nexport * from './scheme/scheme';\nexport * from './scheme/scheme_android';\nexport * from './score/score';\nexport * from './utils/color_utils';\nexport * from './utils/math_utils';\nexport * from './utils/string_utils';\nexport * from './utils/image_utils';\nexport * from './utils/theme_utils';\n//# sourceMappingURL=index.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct';\nimport { TonalPalette } from './tonal_palette';\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n */\nexport class CorePalette {\n    constructor(argb, isContent) {\n        const hct = Hct.fromInt(argb);\n        const hue = hct.hue;\n        const chroma = hct.chroma;\n        if (isContent) {\n            this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n            this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n            this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n            this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n        }\n        else {\n            this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n            this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n            this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n            this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n            this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n        }\n        this.error = TonalPalette.fromHueAndChroma(25, 84);\n    }\n    /**\n     * @param argb ARGB representation of a color\n     */\n    static of(argb) {\n        return new CorePalette(argb, false);\n    }\n    /**\n     * @param argb ARGB representation of a color\n     */\n    static contentOf(argb) {\n        return new CorePalette(argb, true);\n    }\n}\n//# sourceMappingURL=core_palette.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Hct } from '../hct/hct';\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n    constructor(hue, chroma) {\n        this.hue = hue;\n        this.chroma = chroma;\n        this.cache = new Map();\n    }\n    /**\n     * @param argb ARGB representation of a color\n     * @return Tones matching that color's hue and chroma.\n     */\n    static fromInt(argb) {\n        const hct = Hct.fromInt(argb);\n        return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);\n    }\n    /**\n     * @param hue HCT hue\n     * @param chroma HCT chroma\n     * @return Tones matching hue and chroma.\n     */\n    static fromHueAndChroma(hue, chroma) {\n        return new TonalPalette(hue, chroma);\n    }\n    /**\n     * @param tone HCT tone, measured from 0 to 100.\n     * @return ARGB representation of a color with that tone.\n     */\n    tone(tone) {\n        let argb = this.cache.get(tone);\n        if (argb === undefined) {\n            argb = Hct.from(this.hue, this.chroma, tone).toInt();\n            this.cache.set(tone, argb);\n        }\n        return argb;\n    }\n}\n//# sourceMappingURL=tonal_palette.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport './point_provider';\nimport * as utils from '../utils/color_utils';\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider {\n    /**\n     * Convert a color represented in ARGB to a 3-element array of L*a*b*\n     * coordinates of the color.\n     */\n    fromInt(argb) {\n        return utils.labFromArgb(argb);\n    }\n    /**\n     * Convert a 3-element array to a color represented in ARGB.\n     */\n    toInt(point) {\n        return utils.argbFromLab(point[0], point[1], point[2]);\n    }\n    /**\n     * Standard CIE 1976 delta E formula also takes the square root, unneeded\n     * here. This method is used by quantization algorithms to compare distance,\n     * and the relative ordering is the same, with or without a square root.\n     *\n     * This relatively minor optimization is helpful because this method is\n     * called at least once for each pixel in an image.\n     */\n    distance(from, to) {\n        const dL = from[0] - to[0];\n        const dA = from[1] - to[1];\n        const dB = from[2] - to[2];\n        return dL * dL + dA * dA + dB * dB;\n    }\n}\n//# sourceMappingURL=lab_point_provider.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//# sourceMappingURL=point_provider.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { QuantizerWsmeans } from './quantizer_wsmeans';\nimport { QuantizerWu } from './quantizer_wu';\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n    /**\n     * @param pixels Colors in ARGB format.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Map with keys of colors in ARGB format, and values of number of\n     *     pixels in the original image that correspond to the color in the\n     *     quantized image.\n     */\n    static quantize(pixels, maxColors) {\n        const wu = new QuantizerWu();\n        const wuResult = wu.quantize(pixels, maxColors);\n        return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n    }\n}\n//# sourceMappingURL=quantizer_celebi.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils';\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n    /**\n     * @param pixels Colors in ARGB format.\n     * @return A Map with keys of ARGB colors, and values of the number of times\n     *     the color appears in the image.\n     */\n    static quantize(pixels) {\n        var _a;\n        const countByColor = new Map();\n        for (let i = 0; i < pixels.length; i++) {\n            const pixel = pixels[i];\n            const alpha = utils.alphaFromArgb(pixel);\n            if (alpha < 255) {\n                continue;\n            }\n            countByColor.set(pixel, ((_a = countByColor.get(pixel)) !== null && _a !== void 0 ? _a : 0) + 1);\n        }\n        return countByColor;\n    }\n}\n//# sourceMappingURL=quantizer_map.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LabPointProvider } from './lab_point_provider';\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// libmonet is designed to have a consistent API across platforms\n// and modular components that can be moved around easily. Using a class as a\n// namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n    /**\n     * @param inputPixels Colors in ARGB format.\n     * @param startingClusters Defines the initial state of the quantizer. Passing\n     *     an empty array is fine, the implementation will create its own initial\n     *     state that leads to reproducible results for the same inputs.\n     *     Passing an array that is the result of Wu quantization leads to higher\n     *     quality results.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Colors in ARGB format.\n     */\n    static quantize(inputPixels, startingClusters, maxColors) {\n        const pixelToCount = new Map();\n        const points = new Array();\n        const pixels = new Array();\n        const pointProvider = new LabPointProvider();\n        let pointCount = 0;\n        for (let i = 0; i < inputPixels.length; i++) {\n            const inputPixel = inputPixels[i];\n            const pixelCount = pixelToCount.get(inputPixel);\n            if (pixelCount === undefined) {\n                pointCount++;\n                points.push(pointProvider.fromInt(inputPixel));\n                pixels.push(inputPixel);\n                pixelToCount.set(inputPixel, 1);\n            }\n            else {\n                pixelToCount.set(inputPixel, pixelCount + 1);\n            }\n        }\n        const counts = new Array();\n        for (let i = 0; i < pointCount; i++) {\n            const pixel = pixels[i];\n            const count = pixelToCount.get(pixel);\n            if (count !== undefined) {\n                counts[i] = count;\n            }\n        }\n        let clusterCount = Math.min(maxColors, pointCount);\n        if (startingClusters.length > 0) {\n            clusterCount = Math.min(clusterCount, startingClusters.length);\n        }\n        const clusters = new Array();\n        for (let i = 0; i < startingClusters.length; i++) {\n            clusters.push(pointProvider.fromInt(startingClusters[i]));\n        }\n        const additionalClustersNeeded = clusterCount - clusters.length;\n        if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n            for (let i = 0; i < additionalClustersNeeded; i++) {\n                const l = Math.random() * 100.0;\n                const a = Math.random() * (100.0 - (-100.0) + 1) + -100;\n                const b = Math.random() * (100.0 - (-100.0) + 1) + -100;\n                clusters.push(new Array(l, a, b));\n            }\n        }\n        const clusterIndices = new Array();\n        for (let i = 0; i < pointCount; i++) {\n            clusterIndices.push(Math.floor(Math.random() * clusterCount));\n        }\n        const indexMatrix = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            indexMatrix.push(new Array());\n            for (let j = 0; j < clusterCount; j++) {\n                indexMatrix[i].push(0);\n            }\n        }\n        const distanceToIndexMatrix = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            distanceToIndexMatrix.push(new Array());\n            for (let j = 0; j < clusterCount; j++) {\n                distanceToIndexMatrix[i].push(new DistanceAndIndex());\n            }\n        }\n        const pixelCountSums = new Array();\n        for (let i = 0; i < clusterCount; i++) {\n            pixelCountSums.push(0);\n        }\n        for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n            for (let i = 0; i < clusterCount; i++) {\n                for (let j = i + 1; j < clusterCount; j++) {\n                    const distance = pointProvider.distance(clusters[i], clusters[j]);\n                    distanceToIndexMatrix[j][i].distance = distance;\n                    distanceToIndexMatrix[j][i].index = i;\n                    distanceToIndexMatrix[i][j].distance = distance;\n                    distanceToIndexMatrix[i][j].index = j;\n                }\n                distanceToIndexMatrix[i].sort();\n                for (let j = 0; j < clusterCount; j++) {\n                    indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n                }\n            }\n            let pointsMoved = 0;\n            for (let i = 0; i < pointCount; i++) {\n                const point = points[i];\n                const previousClusterIndex = clusterIndices[i];\n                const previousCluster = clusters[previousClusterIndex];\n                const previousDistance = pointProvider.distance(point, previousCluster);\n                let minimumDistance = previousDistance;\n                let newClusterIndex = -1;\n                for (let j = 0; j < clusterCount; j++) {\n                    if (distanceToIndexMatrix[previousClusterIndex][j].distance >=\n                        4 * previousDistance) {\n                        continue;\n                    }\n                    const distance = pointProvider.distance(point, clusters[j]);\n                    if (distance < minimumDistance) {\n                        minimumDistance = distance;\n                        newClusterIndex = j;\n                    }\n                }\n                if (newClusterIndex !== -1) {\n                    const distanceChange = Math.abs((Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));\n                    if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n                        pointsMoved++;\n                        clusterIndices[i] = newClusterIndex;\n                    }\n                }\n            }\n            if (pointsMoved === 0 && iteration !== 0) {\n                break;\n            }\n            const componentASums = new Array(clusterCount).fill(0);\n            const componentBSums = new Array(clusterCount).fill(0);\n            const componentCSums = new Array(clusterCount).fill(0);\n            for (let i = 0; i < clusterCount; i++) {\n                pixelCountSums[i] = 0;\n            }\n            for (let i = 0; i < pointCount; i++) {\n                const clusterIndex = clusterIndices[i];\n                const point = points[i];\n                const count = counts[i];\n                pixelCountSums[clusterIndex] += count;\n                componentASums[clusterIndex] += (point[0] * count);\n                componentBSums[clusterIndex] += (point[1] * count);\n                componentCSums[clusterIndex] += (point[2] * count);\n            }\n            for (let i = 0; i < clusterCount; i++) {\n                const count = pixelCountSums[i];\n                if (count === 0) {\n                    clusters[i] = [0.0, 0.0, 0.0];\n                    continue;\n                }\n                const a = componentASums[i] / count;\n                const b = componentBSums[i] / count;\n                const c = componentCSums[i] / count;\n                clusters[i] = [a, b, c];\n            }\n        }\n        const argbToPopulation = new Map();\n        for (let i = 0; i < clusterCount; i++) {\n            const count = pixelCountSums[i];\n            if (count === 0) {\n                continue;\n            }\n            const possibleNewCluster = pointProvider.toInt(clusters[i]);\n            if (argbToPopulation.has(possibleNewCluster)) {\n                continue;\n            }\n            argbToPopulation.set(possibleNewCluster, count);\n        }\n        return argbToPopulation;\n    }\n}\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nclass DistanceAndIndex {\n    constructor() {\n        this.distance = -1;\n        this.index = -1;\n    }\n}\n//# sourceMappingURL=quantizer_wsmeans.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as utils from '../utils/color_utils';\nimport { QuantizerMap } from './quantizer_map';\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33; // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937; // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\nconst directions = {\n    RED: 'red',\n    GREEN: 'green',\n    BLUE: 'blue',\n};\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n    constructor(weights = [], momentsR = [], momentsG = [], momentsB = [], moments = [], cubes = []) {\n        this.weights = weights;\n        this.momentsR = momentsR;\n        this.momentsG = momentsG;\n        this.momentsB = momentsB;\n        this.moments = moments;\n        this.cubes = cubes;\n    }\n    /**\n     * @param pixels Colors in ARGB format.\n     * @param maxColors The number of colors to divide the image into. A lower\n     *     number of colors may be returned.\n     * @return Colors in ARGB format.\n     */\n    quantize(pixels, maxColors) {\n        this.constructHistogram(pixels);\n        this.computeMoments();\n        const createBoxesResult = this.createBoxes(maxColors);\n        const results = this.createResult(createBoxesResult.resultCount);\n        return results;\n    }\n    constructHistogram(pixels) {\n        var _a;\n        this.weights = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsR = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsG = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.momentsB = Array.from({ length: TOTAL_SIZE }).fill(0);\n        this.moments = Array.from({ length: TOTAL_SIZE }).fill(0);\n        const countByColor = QuantizerMap.quantize(pixels);\n        for (const [pixel, count] of countByColor.entries()) {\n            const red = utils.redFromArgb(pixel);\n            const green = utils.greenFromArgb(pixel);\n            const blue = utils.blueFromArgb(pixel);\n            const bitsToRemove = 8 - INDEX_BITS;\n            const iR = (red >> bitsToRemove) + 1;\n            const iG = (green >> bitsToRemove) + 1;\n            const iB = (blue >> bitsToRemove) + 1;\n            const index = this.getIndex(iR, iG, iB);\n            this.weights[index] = ((_a = this.weights[index]) !== null && _a !== void 0 ? _a : 0) + count;\n            this.momentsR[index] += count * red;\n            this.momentsG[index] += count * green;\n            this.momentsB[index] += count * blue;\n            this.moments[index] += count * (red * red + green * green + blue * blue);\n        }\n    }\n    computeMoments() {\n        for (let r = 1; r < SIDE_LENGTH; r++) {\n            const area = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaR = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaG = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const areaB = Array.from({ length: SIDE_LENGTH }).fill(0);\n            const area2 = Array.from({ length: SIDE_LENGTH }).fill(0.0);\n            for (let g = 1; g < SIDE_LENGTH; g++) {\n                let line = 0;\n                let lineR = 0;\n                let lineG = 0;\n                let lineB = 0;\n                let line2 = 0.0;\n                for (let b = 1; b < SIDE_LENGTH; b++) {\n                    const index = this.getIndex(r, g, b);\n                    line += this.weights[index];\n                    lineR += this.momentsR[index];\n                    lineG += this.momentsG[index];\n                    lineB += this.momentsB[index];\n                    line2 += this.moments[index];\n                    area[b] += line;\n                    areaR[b] += lineR;\n                    areaG[b] += lineG;\n                    areaB[b] += lineB;\n                    area2[b] += line2;\n                    const previousIndex = this.getIndex(r - 1, g, b);\n                    this.weights[index] = this.weights[previousIndex] + area[b];\n                    this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n                    this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n                    this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n                    this.moments[index] = this.moments[previousIndex] + area2[b];\n                }\n            }\n        }\n    }\n    createBoxes(maxColors) {\n        this.cubes =\n            Array.from({ length: maxColors }).fill(0).map(() => new Box());\n        const volumeVariance = Array.from({ length: maxColors }).fill(0.0);\n        this.cubes[0].r0 = 0;\n        this.cubes[0].g0 = 0;\n        this.cubes[0].b0 = 0;\n        this.cubes[0].r1 = SIDE_LENGTH - 1;\n        this.cubes[0].g1 = SIDE_LENGTH - 1;\n        this.cubes[0].b1 = SIDE_LENGTH - 1;\n        let generatedColorCount = maxColors;\n        let next = 0;\n        for (let i = 1; i < maxColors; i++) {\n            if (this.cut(this.cubes[next], this.cubes[i])) {\n                volumeVariance[next] =\n                    this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n                volumeVariance[i] =\n                    this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n            }\n            else {\n                volumeVariance[next] = 0.0;\n                i--;\n            }\n            next = 0;\n            let temp = volumeVariance[0];\n            for (let j = 1; j <= i; j++) {\n                if (volumeVariance[j] > temp) {\n                    temp = volumeVariance[j];\n                    next = j;\n                }\n            }\n            if (temp <= 0.0) {\n                generatedColorCount = i + 1;\n                break;\n            }\n        }\n        return new CreateBoxesResult(maxColors, generatedColorCount);\n    }\n    createResult(colorCount) {\n        const colors = [];\n        for (let i = 0; i < colorCount; ++i) {\n            const cube = this.cubes[i];\n            const weight = this.volume(cube, this.weights);\n            if (weight > 0) {\n                const r = Math.round(this.volume(cube, this.momentsR) / weight);\n                const g = Math.round(this.volume(cube, this.momentsG) / weight);\n                const b = Math.round(this.volume(cube, this.momentsB) / weight);\n                const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\n                    (b & 0x0ff);\n                colors.push(color);\n            }\n        }\n        return colors;\n    }\n    variance(cube) {\n        const dr = this.volume(cube, this.momentsR);\n        const dg = this.volume(cube, this.momentsG);\n        const db = this.volume(cube, this.momentsB);\n        const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n            this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n            this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n            this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n        const hypotenuse = dr * dr + dg * dg + db * db;\n        const volume = this.volume(cube, this.weights);\n        return xx - hypotenuse / volume;\n    }\n    cut(one, two) {\n        const wholeR = this.volume(one, this.momentsR);\n        const wholeG = this.volume(one, this.momentsG);\n        const wholeB = this.volume(one, this.momentsB);\n        const wholeW = this.volume(one, this.weights);\n        const maxRResult = this.maximize(one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB, wholeW);\n        const maxGResult = this.maximize(one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB, wholeW);\n        const maxBResult = this.maximize(one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB, wholeW);\n        let direction;\n        const maxR = maxRResult.maximum;\n        const maxG = maxGResult.maximum;\n        const maxB = maxBResult.maximum;\n        if (maxR >= maxG && maxR >= maxB) {\n            if (maxRResult.cutLocation < 0) {\n                return false;\n            }\n            direction = directions.RED;\n        }\n        else if (maxG >= maxR && maxG >= maxB) {\n            direction = directions.GREEN;\n        }\n        else {\n            direction = directions.BLUE;\n        }\n        two.r1 = one.r1;\n        two.g1 = one.g1;\n        two.b1 = one.b1;\n        switch (direction) {\n            case directions.RED:\n                one.r1 = maxRResult.cutLocation;\n                two.r0 = one.r1;\n                two.g0 = one.g0;\n                two.b0 = one.b0;\n                break;\n            case directions.GREEN:\n                one.g1 = maxGResult.cutLocation;\n                two.r0 = one.r0;\n                two.g0 = one.g1;\n                two.b0 = one.b0;\n                break;\n            case directions.BLUE:\n                one.b1 = maxBResult.cutLocation;\n                two.r0 = one.r0;\n                two.g0 = one.g0;\n                two.b0 = one.b1;\n                break;\n            default:\n                throw new Error('unexpected direction ' + direction);\n        }\n        one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n        two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n        return true;\n    }\n    maximize(cube, direction, first, last, wholeR, wholeG, wholeB, wholeW) {\n        const bottomR = this.bottom(cube, direction, this.momentsR);\n        const bottomG = this.bottom(cube, direction, this.momentsG);\n        const bottomB = this.bottom(cube, direction, this.momentsB);\n        const bottomW = this.bottom(cube, direction, this.weights);\n        let max = 0.0;\n        let cut = -1;\n        let halfR = 0;\n        let halfG = 0;\n        let halfB = 0;\n        let halfW = 0;\n        for (let i = first; i < last; i++) {\n            halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n            halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n            halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n            halfW = bottomW + this.top(cube, direction, i, this.weights);\n            if (halfW === 0) {\n                continue;\n            }\n            let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n            let tempDenominator = halfW * 1.0;\n            let temp = tempNumerator / tempDenominator;\n            halfR = wholeR - halfR;\n            halfG = wholeG - halfG;\n            halfB = wholeB - halfB;\n            halfW = wholeW - halfW;\n            if (halfW === 0) {\n                continue;\n            }\n            tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n            tempDenominator = halfW * 1.0;\n            temp += tempNumerator / tempDenominator;\n            if (temp > max) {\n                max = temp;\n                cut = i;\n            }\n        }\n        return new MaximizeResult(cut, max);\n    }\n    volume(cube, moment) {\n        return (moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n            moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n            moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n            moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n    }\n    bottom(cube, direction, moment) {\n        switch (direction) {\n            case directions.RED:\n                return (-moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            case directions.GREEN:\n                return (-moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            case directions.BLUE:\n                return (-moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n                    moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n                    moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n                    moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n            default:\n                throw new Error('unexpected direction $direction');\n        }\n    }\n    top(cube, direction, position, moment) {\n        switch (direction) {\n            case directions.RED:\n                return (moment[this.getIndex(position, cube.g1, cube.b1)] -\n                    moment[this.getIndex(position, cube.g1, cube.b0)] -\n                    moment[this.getIndex(position, cube.g0, cube.b1)] +\n                    moment[this.getIndex(position, cube.g0, cube.b0)]);\n            case directions.GREEN:\n                return (moment[this.getIndex(cube.r1, position, cube.b1)] -\n                    moment[this.getIndex(cube.r1, position, cube.b0)] -\n                    moment[this.getIndex(cube.r0, position, cube.b1)] +\n                    moment[this.getIndex(cube.r0, position, cube.b0)]);\n            case directions.BLUE:\n                return (moment[this.getIndex(cube.r1, cube.g1, position)] -\n                    moment[this.getIndex(cube.r1, cube.g0, position)] -\n                    moment[this.getIndex(cube.r0, cube.g1, position)] +\n                    moment[this.getIndex(cube.r0, cube.g0, position)]);\n            default:\n                throw new Error('unexpected direction $direction');\n        }\n    }\n    getIndex(r, g, b) {\n        return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\n            (g << INDEX_BITS) + g + b;\n    }\n}\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nclass Box {\n    constructor(r0 = 0, r1 = 0, g0 = 0, g1 = 0, b0 = 0, b1 = 0, vol = 0) {\n        this.r0 = r0;\n        this.r1 = r1;\n        this.g0 = g0;\n        this.g1 = g1;\n        this.b0 = b0;\n        this.b1 = b1;\n        this.vol = vol;\n    }\n}\n/**\n * Represents final result of Wu algorithm.\n */\nclass CreateBoxesResult {\n    /**\n     * @param requestedCount how many colors the caller asked to be returned from\n     *     quantization.\n     * @param resultCount the actual number of colors achieved from quantization.\n     *     May be lower than the requested count.\n     */\n    constructor(requestedCount, resultCount) {\n        this.requestedCount = requestedCount;\n        this.resultCount = resultCount;\n    }\n}\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nclass MaximizeResult {\n    constructor(cutLocation, maximum) {\n        this.cutLocation = cutLocation;\n        this.maximum = maximum;\n    }\n}\n//# sourceMappingURL=quantizer_wu.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport { CorePalette } from '../palettes/core_palette';\n/**\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n    constructor(props) {\n        this.props = props;\n    }\n    get primary() {\n        return this.props.primary;\n    }\n    get onPrimary() {\n        return this.props.onPrimary;\n    }\n    get primaryContainer() {\n        return this.props.primaryContainer;\n    }\n    get onPrimaryContainer() {\n        return this.props.onPrimaryContainer;\n    }\n    get secondary() {\n        return this.props.secondary;\n    }\n    get onSecondary() {\n        return this.props.onSecondary;\n    }\n    get secondaryContainer() {\n        return this.props.secondaryContainer;\n    }\n    get onSecondaryContainer() {\n        return this.props.onSecondaryContainer;\n    }\n    get tertiary() {\n        return this.props.tertiary;\n    }\n    get onTertiary() {\n        return this.props.onTertiary;\n    }\n    get tertiaryContainer() {\n        return this.props.tertiaryContainer;\n    }\n    get onTertiaryContainer() {\n        return this.props.onTertiaryContainer;\n    }\n    get error() {\n        return this.props.error;\n    }\n    get onError() {\n        return this.props.onError;\n    }\n    get errorContainer() {\n        return this.props.errorContainer;\n    }\n    get onErrorContainer() {\n        return this.props.onErrorContainer;\n    }\n    get background() {\n        return this.props.background;\n    }\n    get onBackground() {\n        return this.props.onBackground;\n    }\n    get surface() {\n        return this.props.surface;\n    }\n    get onSurface() {\n        return this.props.onSurface;\n    }\n    get surfaceVariant() {\n        return this.props.surfaceVariant;\n    }\n    get onSurfaceVariant() {\n        return this.props.onSurfaceVariant;\n    }\n    get outline() {\n        return this.props.outline;\n    }\n    get outlineVariant() {\n        return this.props.outlineVariant;\n    }\n    get shadow() {\n        return this.props.shadow;\n    }\n    get scrim() {\n        return this.props.scrim;\n    }\n    get inverseSurface() {\n        return this.props.inverseSurface;\n    }\n    get inverseOnSurface() {\n        return this.props.inverseOnSurface;\n    }\n    get inversePrimary() {\n        return this.props.inversePrimary;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material color scheme, based on the color's hue.\n     */\n    static light(argb) {\n        return Scheme.lightFromCorePalette(CorePalette.of(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material color scheme, based on the color's hue.\n     */\n    static dark(argb) {\n        return Scheme.darkFromCorePalette(CorePalette.of(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material content color scheme, based on the color's hue.\n     */\n    static lightContent(argb) {\n        return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material content color scheme, based on the color's hue.\n     */\n    static darkContent(argb) {\n        return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n    }\n    /**\n     * Light scheme from core palette\n     */\n    static lightFromCorePalette(core) {\n        return new Scheme({\n            primary: core.a1.tone(40),\n            onPrimary: core.a1.tone(100),\n            primaryContainer: core.a1.tone(90),\n            onPrimaryContainer: core.a1.tone(10),\n            secondary: core.a2.tone(40),\n            onSecondary: core.a2.tone(100),\n            secondaryContainer: core.a2.tone(90),\n            onSecondaryContainer: core.a2.tone(10),\n            tertiary: core.a3.tone(40),\n            onTertiary: core.a3.tone(100),\n            tertiaryContainer: core.a3.tone(90),\n            onTertiaryContainer: core.a3.tone(10),\n            error: core.error.tone(40),\n            onError: core.error.tone(100),\n            errorContainer: core.error.tone(90),\n            onErrorContainer: core.error.tone(10),\n            background: core.n1.tone(99),\n            onBackground: core.n1.tone(10),\n            surface: core.n1.tone(99),\n            onSurface: core.n1.tone(10),\n            surfaceVariant: core.n2.tone(90),\n            onSurfaceVariant: core.n2.tone(30),\n            outline: core.n2.tone(50),\n            outlineVariant: core.n2.tone(80),\n            shadow: core.n1.tone(0),\n            scrim: core.n1.tone(0),\n            inverseSurface: core.n1.tone(20),\n            inverseOnSurface: core.n1.tone(95),\n            inversePrimary: core.a1.tone(80)\n        });\n    }\n    /**\n     * Dark scheme from core palette\n     */\n    static darkFromCorePalette(core) {\n        return new Scheme({\n            primary: core.a1.tone(80),\n            onPrimary: core.a1.tone(20),\n            primaryContainer: core.a1.tone(30),\n            onPrimaryContainer: core.a1.tone(90),\n            secondary: core.a2.tone(80),\n            onSecondary: core.a2.tone(20),\n            secondaryContainer: core.a2.tone(30),\n            onSecondaryContainer: core.a2.tone(90),\n            tertiary: core.a3.tone(80),\n            onTertiary: core.a3.tone(20),\n            tertiaryContainer: core.a3.tone(30),\n            onTertiaryContainer: core.a3.tone(90),\n            error: core.error.tone(80),\n            onError: core.error.tone(20),\n            errorContainer: core.error.tone(30),\n            onErrorContainer: core.error.tone(80),\n            background: core.n1.tone(10),\n            onBackground: core.n1.tone(90),\n            surface: core.n1.tone(10),\n            onSurface: core.n1.tone(90),\n            surfaceVariant: core.n2.tone(30),\n            onSurfaceVariant: core.n2.tone(80),\n            outline: core.n2.tone(60),\n            outlineVariant: core.n2.tone(30),\n            shadow: core.n1.tone(0),\n            scrim: core.n1.tone(0),\n            inverseSurface: core.n1.tone(90),\n            inverseOnSurface: core.n1.tone(20),\n            inversePrimary: core.a1.tone(40)\n        });\n    }\n    toJSON() {\n        return Object.assign({}, this.props);\n    }\n}\n//# sourceMappingURL=scheme.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CorePalette } from '../palettes/core_palette';\n/**\n * Represents an Android 12 color scheme, a mapping of color roles to colors.\n */\nexport class SchemeAndroid {\n    constructor(props) {\n        this.props = props;\n    }\n    get colorAccentPrimary() {\n        return this.props.colorAccentPrimary;\n    }\n    get colorAccentPrimaryVariant() {\n        return this.props.colorAccentPrimaryVariant;\n    }\n    get colorAccentSecondary() {\n        return this.props.colorAccentSecondary;\n    }\n    get colorAccentSecondaryVariant() {\n        return this.props.colorAccentSecondaryVariant;\n    }\n    get colorAccentTertiary() {\n        return this.props.colorAccentTertiary;\n    }\n    get colorAccentTertiaryVariant() {\n        return this.props.colorAccentTertiaryVariant;\n    }\n    get textColorPrimary() {\n        return this.props.textColorPrimary;\n    }\n    get textColorSecondary() {\n        return this.props.textColorSecondary;\n    }\n    get textColorTertiary() {\n        return this.props.textColorTertiary;\n    }\n    get textColorPrimaryInverse() {\n        return this.props.textColorPrimaryInverse;\n    }\n    get textColorSecondaryInverse() {\n        return this.props.textColorSecondaryInverse;\n    }\n    get textColorTertiaryInverse() {\n        return this.props.textColorTertiaryInverse;\n    }\n    get colorBackground() {\n        return this.props.colorBackground;\n    }\n    get colorBackgroundFloating() {\n        return this.props.colorBackgroundFloating;\n    }\n    get colorSurface() {\n        return this.props.colorSurface;\n    }\n    get colorSurfaceVariant() {\n        return this.props.colorSurfaceVariant;\n    }\n    get colorSurfaceHighlight() {\n        return this.props.colorSurfaceHighlight;\n    }\n    get surfaceHeader() {\n        return this.props.surfaceHeader;\n    }\n    get underSurface() {\n        return this.props.underSurface;\n    }\n    get offState() {\n        return this.props.offState;\n    }\n    get accentSurface() {\n        return this.props.accentSurface;\n    }\n    get textPrimaryOnAccent() {\n        return this.props.textPrimaryOnAccent;\n    }\n    get textSecondaryOnAccent() {\n        return this.props.textSecondaryOnAccent;\n    }\n    get volumeBackground() {\n        return this.props.volumeBackground;\n    }\n    get scrim() {\n        return this.props.scrim;\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Material color scheme, based on the color's hue.\n     */\n    static light(argb) {\n        const core = CorePalette.of(argb);\n        return SchemeAndroid.lightFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Material color scheme, based on the color's hue.\n     */\n    static dark(argb) {\n        const core = CorePalette.of(argb);\n        return SchemeAndroid.darkFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Light Android color scheme, based on the color's hue.\n     */\n    static lightContent(argb) {\n        const core = CorePalette.contentOf(argb);\n        return SchemeAndroid.lightFromCorePalette(core);\n    }\n    /**\n     * @param argb ARGB representation of a color.\n     * @return Dark Android color scheme, based on the color's hue.\n     */\n    static darkContent(argb) {\n        const core = CorePalette.contentOf(argb);\n        return SchemeAndroid.darkFromCorePalette(core);\n    }\n    /**\n     * Light scheme from core palette\n     */\n    static lightFromCorePalette(core) {\n        return new SchemeAndroid({\n            colorAccentPrimary: core.a1.tone(90),\n            colorAccentPrimaryVariant: core.a1.tone(40),\n            colorAccentSecondary: core.a2.tone(90),\n            colorAccentSecondaryVariant: core.a2.tone(40),\n            colorAccentTertiary: core.a3.tone(90),\n            colorAccentTertiaryVariant: core.a3.tone(40),\n            textColorPrimary: core.n1.tone(10),\n            textColorSecondary: core.n2.tone(30),\n            textColorTertiary: core.n2.tone(50),\n            textColorPrimaryInverse: core.n1.tone(95),\n            textColorSecondaryInverse: core.n1.tone(80),\n            textColorTertiaryInverse: core.n1.tone(60),\n            colorBackground: core.n1.tone(95),\n            colorBackgroundFloating: core.n1.tone(98),\n            colorSurface: core.n1.tone(98),\n            colorSurfaceVariant: core.n1.tone(90),\n            colorSurfaceHighlight: core.n1.tone(100),\n            surfaceHeader: core.n1.tone(90),\n            underSurface: core.n1.tone(0),\n            offState: core.n1.tone(20),\n            accentSurface: core.a2.tone(95),\n            textPrimaryOnAccent: core.n1.tone(10),\n            textSecondaryOnAccent: core.n2.tone(30),\n            volumeBackground: core.n1.tone(25),\n            scrim: core.n1.tone(80),\n        });\n    }\n    /**\n     * Dark scheme from core palette\n     */\n    static darkFromCorePalette(core) {\n        return new SchemeAndroid({\n            colorAccentPrimary: core.a1.tone(90),\n            colorAccentPrimaryVariant: core.a1.tone(70),\n            colorAccentSecondary: core.a2.tone(90),\n            colorAccentSecondaryVariant: core.a2.tone(70),\n            colorAccentTertiary: core.a3.tone(90),\n            colorAccentTertiaryVariant: core.a3.tone(70),\n            textColorPrimary: core.n1.tone(95),\n            textColorSecondary: core.n2.tone(80),\n            textColorTertiary: core.n2.tone(60),\n            textColorPrimaryInverse: core.n1.tone(10),\n            textColorSecondaryInverse: core.n1.tone(30),\n            textColorTertiaryInverse: core.n1.tone(50),\n            colorBackground: core.n1.tone(10),\n            colorBackgroundFloating: core.n1.tone(10),\n            colorSurface: core.n1.tone(20),\n            colorSurfaceVariant: core.n1.tone(30),\n            colorSurfaceHighlight: core.n1.tone(35),\n            surfaceHeader: core.n1.tone(30),\n            underSurface: core.n1.tone(0),\n            offState: core.n1.tone(20),\n            accentSurface: core.a2.tone(95),\n            textPrimaryOnAccent: core.n1.tone(10),\n            textSecondaryOnAccent: core.n2.tone(30),\n            volumeBackground: core.n1.tone(25),\n            scrim: core.n1.tone(80),\n        });\n    }\n    toJSON() {\n        return Object.assign({}, this.props);\n    }\n}\n//# sourceMappingURL=scheme_android.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Cam16 } from '../hct/cam16';\nimport * as utils from '../utils/color_utils';\nimport * as math from '../utils/math_utils';\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n    constructor() { }\n    /**\n     * Given a map with keys of colors and values of how often the color appears,\n     * rank the colors based on suitability for being used for a UI theme.\n     *\n     * @param colorsToPopulation map with keys of colors and values of how often\n     *     the color appears, usually from a source image.\n     * @return Colors sorted by suitability for a UI theme. The most suitable\n     *     color is the first item, the least suitable is the last. There will\n     *     always be at least one color returned. If all the input colors\n     *     were not suitable for a theme, a default fallback color will be\n     *     provided, Google Blue.\n     */\n    static score(colorsToPopulation, contentColor = false) {\n        // Determine the total count of all colors.\n        let populationSum = 0;\n        for (const population of colorsToPopulation.values()) {\n            populationSum += population;\n        }\n        // Turn the count of each color into a proportion by dividing by the total\n        // count. Also, fill a cache of CAM16 colors representing each color, and\n        // record the proportion of colors for each CAM16 hue.\n        const colorsToProportion = new Map();\n        const colorsToCam = new Map();\n        const hueProportions = new Array(360).fill(0);\n        for (const [color, population] of colorsToPopulation.entries()) {\n            const proportion = population / populationSum;\n            colorsToProportion.set(color, proportion);\n            const cam = Cam16.fromInt(color);\n            colorsToCam.set(color, cam);\n            const hue = Math.round(cam.hue);\n            hueProportions[hue] += proportion;\n        }\n        // Determine the proportion of the colors around each color, by summing the\n        // proportions around each color's hue.\n        const colorsToExcitedProportion = new Map();\n        for (const [color, cam] of colorsToCam.entries()) {\n            const hue = Math.round(cam.hue);\n            let excitedProportion = 0;\n            for (let i = (hue - 15); i < (hue + 15); i++) {\n                const neighborHue = math.sanitizeDegreesInt(i);\n                excitedProportion += hueProportions[neighborHue];\n            }\n            colorsToExcitedProportion.set(color, excitedProportion);\n        }\n        // Score the colors by their proportion, as well as how chromatic they are.\n        const colorsToScore = new Map();\n        for (const [color, cam] of colorsToCam.entries()) {\n            const proportion = colorsToExcitedProportion.get(color);\n            const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n            const chromaWeight = cam.chroma < Score.TARGET_CHROMA ?\n                Score.WEIGHT_CHROMA_BELOW :\n                Score.WEIGHT_CHROMA_ABOVE;\n            const chromaScore = (cam.chroma - Score.TARGET_CHROMA) * chromaWeight;\n            const score = proportionScore + chromaScore;\n            colorsToScore.set(color, score);\n        }\n        // Remove colors that are unsuitable, ex. very dark or unchromatic colors.\n        // Also, remove colors that are very similar in hue.\n        const filteredColors = contentColor ?\n            Score.filterContent(colorsToCam) :\n            Score.filter(colorsToExcitedProportion, colorsToCam);\n        const dedupedColorsToScore = new Map();\n        for (const color of filteredColors) {\n            let duplicateHue = false;\n            const hue = colorsToCam.get(color).hue;\n            for (const [alreadyChosenColor,] of dedupedColorsToScore) {\n                const alreadyChosenHue = colorsToCam.get(alreadyChosenColor).hue;\n                if (math.differenceDegrees(hue, alreadyChosenHue) < 15) {\n                    duplicateHue = true;\n                    break;\n                }\n            }\n            if (duplicateHue) {\n                continue;\n            }\n            dedupedColorsToScore.set(color, colorsToScore.get(color));\n        }\n        // Ensure the list of colors returned is sorted such that the first in the\n        // list is the most suitable, and the last is the least suitable.\n        const colorsByScoreDescending = Array.from(dedupedColorsToScore.entries());\n        colorsByScoreDescending.sort((first, second) => {\n            return second[1] - first[1];\n        });\n        const answer = colorsByScoreDescending.map((entry) => {\n            return entry[0];\n        });\n        // Ensure that at least one color is returned.\n        if (answer.length === 0) {\n            answer.push(0xff4285F4); // Google Blue\n        }\n        return answer;\n    }\n    static filter(colorsToExcitedProportion, colorsToCam) {\n        const filtered = new Array();\n        for (const [color, cam] of colorsToCam.entries()) {\n            const proportion = colorsToExcitedProportion.get(color);\n            if (cam.chroma >= Score.CUTOFF_CHROMA &&\n                utils.lstarFromArgb(color) >= Score.CUTOFF_TONE &&\n                proportion >= Score.CUTOFF_EXCITED_PROPORTION) {\n                filtered.push(color);\n            }\n        }\n        return filtered;\n    }\n    static filterContent(colorsToCam) {\n        return Array.from(colorsToCam.keys());\n    }\n}\nScore.TARGET_CHROMA = 48.0;\nScore.WEIGHT_PROPORTION = 0.7;\nScore.WEIGHT_CHROMA_ABOVE = 0.3;\nScore.WEIGHT_CHROMA_BELOW = 0.1;\nScore.CUTOFF_CHROMA = 15.0;\nScore.CUTOFF_TONE = 10.0;\nScore.CUTOFF_EXCITED_PROPORTION = 0.01;\n//# sourceMappingURL=score.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\nimport * as mathUtils from './math_utils';\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\nconst SRGB_TO_XYZ = [\n    [0.41233895, 0.35762064, 0.18051042],\n    [0.2126, 0.7152, 0.0722],\n    [0.01932141, 0.11916382, 0.95034478],\n];\nconst XYZ_TO_SRGB = [\n    [\n        3.2413774792388685,\n        -1.5376652402851851,\n        -0.49885366846268053,\n    ],\n    [\n        -0.9691452513005321,\n        1.8758853451067872,\n        0.04156585616912061,\n    ],\n    [\n        0.05562093689691305,\n        -0.20395524564742123,\n        1.0571799111220335,\n    ],\n];\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red, green, blue) {\n    return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n        0;\n}\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb) {\n    const r = delinearized(linrgb[0]);\n    const g = delinearized(linrgb[1]);\n    const b = delinearized(linrgb[2]);\n    return argbFromRgb(r, g, b);\n}\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb) {\n    return argb >> 24 & 255;\n}\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb) {\n    return argb >> 16 & 255;\n}\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb) {\n    return argb >> 8 & 255;\n}\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb) {\n    return argb & 255;\n}\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb) {\n    return alphaFromArgb(argb) >= 255;\n}\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x, y, z) {\n    const matrix = XYZ_TO_SRGB;\n    const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n    const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n    const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n    const r = delinearized(linearR);\n    const g = delinearized(linearG);\n    const b = delinearized(linearB);\n    return argbFromRgb(r, g, b);\n}\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb) {\n    const r = linearized(redFromArgb(argb));\n    const g = linearized(greenFromArgb(argb));\n    const b = linearized(blueFromArgb(argb));\n    return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l, a, b) {\n    const whitePoint = WHITE_POINT_D65;\n    const fy = (l + 16.0) / 116.0;\n    const fx = a / 500.0 + fy;\n    const fz = fy - b / 200.0;\n    const xNormalized = labInvf(fx);\n    const yNormalized = labInvf(fy);\n    const zNormalized = labInvf(fz);\n    const x = xNormalized * whitePoint[0];\n    const y = yNormalized * whitePoint[1];\n    const z = zNormalized * whitePoint[2];\n    return argbFromXyz(x, y, z);\n}\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb) {\n    const linearR = linearized(redFromArgb(argb));\n    const linearG = linearized(greenFromArgb(argb));\n    const linearB = linearized(blueFromArgb(argb));\n    const matrix = SRGB_TO_XYZ;\n    const x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n    const y = matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n    const z = matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n    const whitePoint = WHITE_POINT_D65;\n    const xNormalized = x / whitePoint[0];\n    const yNormalized = y / whitePoint[1];\n    const zNormalized = z / whitePoint[2];\n    const fx = labF(xNormalized);\n    const fy = labF(yNormalized);\n    const fz = labF(zNormalized);\n    const l = 116.0 * fy - 16;\n    const a = 500.0 * (fx - fy);\n    const b = 200.0 * (fy - fz);\n    return [l, a, b];\n}\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar) {\n    const y = yFromLstar(lstar);\n    const component = delinearized(y);\n    return argbFromRgb(component, component, component);\n}\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb) {\n    const y = xyzFromArgb(argb)[1];\n    return 116.0 * labF(y / 100.0) - 16.0;\n}\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar) {\n    return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent) {\n    const normalized = rgbComponent / 255.0;\n    if (normalized <= 0.040449936) {\n        return normalized / 12.92 * 100.0;\n    }\n    else {\n        return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n    }\n}\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent) {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n    }\n    else {\n        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65() {\n    return WHITE_POINT_D65;\n}\nfunction labF(t) {\n    const e = 216.0 / 24389.0;\n    const kappa = 24389.0 / 27.0;\n    if (t > e) {\n        return Math.pow(t, 1.0 / 3.0);\n    }\n    else {\n        return (kappa * t + 16) / 116;\n    }\n}\nfunction labInvf(ft) {\n    const e = 216.0 / 24389.0;\n    const kappa = 24389.0 / 27.0;\n    const ft3 = ft * ft * ft;\n    if (ft3 > e) {\n        return ft3;\n    }\n    else {\n        return (116 * ft - 16) / kappa;\n    }\n}\n//# sourceMappingURL=color_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { QuantizerCelebi } from '../quantize/quantizer_celebi';\nimport { Score } from '../score/score';\nimport { argbFromRgb } from './color_utils';\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image) {\n    // Convert Image data to Pixel Array\n    const imageBytes = await new Promise((resolve, reject) => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        if (!context) {\n            return reject(new Error('Could not get canvas context'));\n        }\n        image.onload = () => {\n            canvas.width = image.width;\n            canvas.height = image.height;\n            context.drawImage(image, 0, 0);\n            resolve(context.getImageData(0, 0, image.width, image.height).data);\n        };\n    });\n    // Convert Image data to Pixel Array\n    const pixels = [];\n    for (let i = 0; i < imageBytes.length; i += 4) {\n        const r = imageBytes[i];\n        const g = imageBytes[i + 1];\n        const b = imageBytes[i + 2];\n        const a = imageBytes[i + 3];\n        if (a < 255) {\n            continue;\n        }\n        const argb = argbFromRgb(r, g, b);\n        pixels.push(argb);\n    }\n    // Convert Pixels to Material Colors\n    const result = QuantizerCelebi.quantize(pixels, 128);\n    const ranked = Score.score(result);\n    const top = ranked[0];\n    return top;\n}\n//# sourceMappingURL=image_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file is automatically generated. Do not modify it.\n/**\n * Utility methods for mathematical operations.\n */\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num) {\n    if (num < 0) {\n        return -1;\n    }\n    else if (num === 0) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start, stop, amount) {\n    return (1.0 - amount) * start + amount * stop;\n}\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min, max, input) {\n    if (input < min) {\n        return min;\n    }\n    else if (input > max) {\n        return max;\n    }\n    return input;\n}\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min, max, input) {\n    if (input < min) {\n        return min;\n    }\n    else if (input > max) {\n        return max;\n    }\n    return input;\n}\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees) {\n    degrees = degrees % 360;\n    if (degrees < 0) {\n        degrees = degrees + 360;\n    }\n    return degrees;\n}\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees) {\n    degrees = degrees % 360.0;\n    if (degrees < 0) {\n        degrees = degrees + 360.0;\n    }\n    return degrees;\n}\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from, to) {\n    const increasingDifference = sanitizeDegreesDouble(to - from);\n    return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a, b) {\n    return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row, matrix) {\n    const a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n    const b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n    const c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n    return [a, b, c];\n}\n//# sourceMappingURL=math_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as colorUtils from './color_utils';\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport const hexFromArgb = (argb) => {\n    const r = colorUtils.redFromArgb(argb);\n    const g = colorUtils.greenFromArgb(argb);\n    const b = colorUtils.blueFromArgb(argb);\n    const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n    // Pad single-digit output values\n    for (const [i, part] of outParts.entries()) {\n        if (part.length === 1) {\n            outParts[i] = '0' + part;\n        }\n    }\n    return '#' + outParts.join('');\n};\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport const argbFromHex = (hex) => {\n    hex = hex.replace('#', '');\n    const isThree = hex.length === 3;\n    const isSix = hex.length === 6;\n    const isEight = hex.length === 8;\n    if (!isThree && !isSix && !isEight) {\n        throw new Error('unexpected hex ' + hex);\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    if (isThree) {\n        r = parseIntHex(hex.slice(0, 1).repeat(2));\n        g = parseIntHex(hex.slice(1, 2).repeat(2));\n        b = parseIntHex(hex.slice(2, 3).repeat(2));\n    }\n    else if (isSix) {\n        r = parseIntHex(hex.slice(0, 2));\n        g = parseIntHex(hex.slice(2, 4));\n        b = parseIntHex(hex.slice(4, 6));\n    }\n    else if (isEight) {\n        r = parseIntHex(hex.slice(2, 4));\n        g = parseIntHex(hex.slice(4, 6));\n        b = parseIntHex(hex.slice(6, 8));\n    }\n    return (((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n        0);\n};\nfunction parseIntHex(value) {\n    // tslint:disable-next-line:ban\n    return parseInt(value, 16);\n}\n//# sourceMappingURL=string_utils.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Blend } from '../blend/blend';\nimport { CorePalette } from '../palettes/core_palette';\nimport { Scheme } from '../scheme/scheme';\nimport { sourceColorFromImage } from './image_utils';\nimport { hexFromArgb } from './string_utils';\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(source, customColors = []) {\n    const palette = CorePalette.of(source);\n    return {\n        source,\n        schemes: {\n            light: Scheme.light(source),\n            dark: Scheme.dark(source),\n        },\n        palettes: {\n            primary: palette.a1,\n            secondary: palette.a2,\n            tertiary: palette.a3,\n            neutral: palette.n1,\n            neutralVariant: palette.n2,\n            error: palette.error,\n        },\n        customColors: customColors.map((c) => customColor(source, c)),\n    };\n}\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(image, customColors = []) {\n    const source = await sourceColorFromImage(image);\n    return themeFromSourceColor(source, customColors);\n}\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(source, color) {\n    let value = color.value;\n    const from = value;\n    const to = source;\n    if (color.blend) {\n        value = Blend.harmonize(from, to);\n    }\n    const palette = CorePalette.of(value);\n    const tones = palette.a1;\n    return {\n        color,\n        value,\n        light: {\n            color: tones.tone(40),\n            onColor: tones.tone(100),\n            colorContainer: tones.tone(90),\n            onColorContainer: tones.tone(10),\n        },\n        dark: {\n            color: tones.tone(80),\n            onColor: tones.tone(20),\n            colorContainer: tones.tone(30),\n            onColorContainer: tones.tone(90),\n        },\n    };\n}\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(theme, options) {\n    var _a, _b;\n    const target = (options === null || options === void 0 ? void 0 : options.target) || document.body;\n    const isDark = (_a = options === null || options === void 0 ? void 0 : options.dark) !== null && _a !== void 0 ? _a : false;\n    const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n    setSchemeProperties(target, scheme);\n    if (options === null || options === void 0 ? void 0 : options.brightnessSuffix) {\n        setSchemeProperties(target, theme.schemes.dark, '-dark');\n        setSchemeProperties(target, theme.schemes.light, '-light');\n    }\n    if (options === null || options === void 0 ? void 0 : options.paletteTones) {\n        const tones = (_b = options === null || options === void 0 ? void 0 : options.paletteTones) !== null && _b !== void 0 ? _b : [];\n        for (const [key, palette] of Object.entries(theme.palettes)) {\n            const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n            for (const tone of tones) {\n                const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n                const color = hexFromArgb(palette.tone(tone));\n                target.style.setProperty(token, color);\n            }\n        }\n    }\n}\nfunction setSchemeProperties(target, scheme, suffix = '') {\n    for (const [key, value] of Object.entries(scheme.toJSON())) {\n        const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        const color = hexFromArgb(value);\n        target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n    }\n}\n//# sourceMappingURL=theme_utils.js.map","// TODO: async. Should probably be done with NSFileHandle and some notifications\n// TODO: file descriptor. Needs to be done with NSFileHandle\nvar Buffer = require(\"buffer\").Buffer;\nvar utils = require(\"./utils\");\nvar parseStat = utils.parseStat;\nvar fsError = utils.fsError;\nvar fsErrorForPath = utils.fsErrorForPath;\nvar encodingFromOptions = utils.encodingFromOptions;\nvar NOT_IMPLEMENTED = utils.NOT_IMPLEMENTED;\n\nmodule.exports.constants = {\n  F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  X_OK: 1,\n};\n\nmodule.exports.access = NOT_IMPLEMENTED(\"access\");\n\nmodule.exports.accessSync = function (path, mode) {\n  mode = mode | 0;\n  var fileManager = NSFileManager.defaultManager();\n\n  switch (mode) {\n    case 0:\n      canAccess = module.exports.existsSync(path);\n      break;\n    case 1:\n      canAccess = Boolean(Number(fileManager.isExecutableFileAtPath(path)));\n      break;\n    case 2:\n      canAccess = Boolean(Number(fileManager.isWritableFileAtPath(path)));\n      break;\n    case 3:\n      canAccess =\n        Boolean(Number(fileManager.isExecutableFileAtPath(path))) &&\n        Boolean(Number(fileManager.isWritableFileAtPath(path)));\n      break;\n    case 4:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path)));\n      break;\n    case 5:\n      canAccess =\n        Boolean(Number(fileManager.isReadableFileAtPath(path))) &&\n        Boolean(Number(fileManager.isExecutableFileAtPath(path)));\n      break;\n    case 6:\n      canAccess =\n        Boolean(Number(fileManager.isReadableFileAtPath(path))) &&\n        Boolean(Number(fileManager.isWritableFileAtPath(path)));\n      break;\n    case 7:\n      canAccess =\n        Boolean(Number(fileManager.isReadableFileAtPath(path))) &&\n        Boolean(Number(fileManager.isWritableFileAtPath(path))) &&\n        Boolean(Number(fileManager.isExecutableFileAtPath(path)));\n      break;\n  }\n\n  if (!canAccess) {\n    throw new Error(\"Can't access \" + String(path));\n  }\n};\n\nmodule.exports.appendFile = NOT_IMPLEMENTED(\"appendFile\");\n\nmodule.exports.appendFileSync = function (file, data, options) {\n  if (!module.exports.existsSync(file)) {\n    return module.exports.writeFileSync(file, data, options);\n  }\n\n  var handle = NSFileHandle.fileHandleForWritingAtPath(file);\n  handle.seekToEndOfFile();\n\n  var encoding = encodingFromOptions(options, \"utf8\");\n\n  var nsdata = Buffer.from(\n    data,\n    encoding === \"NSData\" || encoding === \"buffer\" ? undefined : encoding\n  ).toNSData();\n\n  handle.writeData(nsdata);\n};\n\nmodule.exports.chmod = NOT_IMPLEMENTED(\"chmod\");\n\nmodule.exports.chmodSync = function (path, mode) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  fileManager.setAttributes_ofItemAtPath_error(\n    {\n      NSFilePosixPermissions: mode,\n    },\n    path,\n    err\n  );\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value());\n  }\n};\n\nmodule.exports.chown = NOT_IMPLEMENTED(\"chown\");\nmodule.exports.chownSync = NOT_IMPLEMENTED(\"chownSync\");\n\nmodule.exports.close = NOT_IMPLEMENTED(\"close\");\nmodule.exports.closeSync = NOT_IMPLEMENTED(\"closeSync\");\n\nmodule.exports.copyFile = NOT_IMPLEMENTED(\"copyFile\");\n\nmodule.exports.copyFileSync = function (path, dest, flags) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  fileManager.copyItemAtPath_toPath_error(path, dest, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, false, err.value());\n  }\n};\n\nmodule.exports.createReadStream = NOT_IMPLEMENTED(\"createReadStream\");\nmodule.exports.createWriteStream = NOT_IMPLEMENTED(\"createWriteStream\");\n\nmodule.exports.exists = NOT_IMPLEMENTED(\"exists\");\n\nmodule.exports.existsSync = function (path) {\n  var fileManager = NSFileManager.defaultManager();\n  return Boolean(Number(fileManager.fileExistsAtPath(path)));\n};\n\nmodule.exports.fchmod = NOT_IMPLEMENTED(\"fchmod\");\nmodule.exports.fchmodSync = NOT_IMPLEMENTED(\"fchmodSync\");\nmodule.exports.fchown = NOT_IMPLEMENTED(\"fchown\");\nmodule.exports.fchownSync = NOT_IMPLEMENTED(\"fchownSync\");\nmodule.exports.fdatasync = NOT_IMPLEMENTED(\"fdatasync\");\nmodule.exports.fdatasyncSync = NOT_IMPLEMENTED(\"fdatasyncSync\");\nmodule.exports.fstat = NOT_IMPLEMENTED(\"fstat\");\nmodule.exports.fstatSync = NOT_IMPLEMENTED(\"fstatSync\");\nmodule.exports.fsync = NOT_IMPLEMENTED(\"fsync\");\nmodule.exports.fsyncSync = NOT_IMPLEMENTED(\"fsyncSync\");\nmodule.exports.ftruncate = NOT_IMPLEMENTED(\"ftruncate\");\nmodule.exports.ftruncateSync = NOT_IMPLEMENTED(\"ftruncateSync\");\nmodule.exports.futimes = NOT_IMPLEMENTED(\"futimes\");\nmodule.exports.futimesSync = NOT_IMPLEMENTED(\"futimesSync\");\n\nmodule.exports.lchmod = NOT_IMPLEMENTED(\"lchmod\");\nmodule.exports.lchmodSync = NOT_IMPLEMENTED(\"lchmodSync\");\nmodule.exports.lchown = NOT_IMPLEMENTED(\"lchown\");\nmodule.exports.lchownSync = NOT_IMPLEMENTED(\"lchownSync\");\n\nmodule.exports.link = NOT_IMPLEMENTED(\"link\");\n\nmodule.exports.linkSync = function (existingPath, newPath) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  fileManager.linkItemAtPath_toPath_error(existingPath, newPath, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(existingPath, undefined, err.value());\n  }\n};\n\nmodule.exports.lstat = NOT_IMPLEMENTED(\"lstat\");\n\nmodule.exports.lstatSync = function (path) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var result = fileManager.attributesOfItemAtPath_error(path, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value());\n  }\n\n  return parseStat(result);\n};\n\nmodule.exports.mkdir = NOT_IMPLEMENTED(\"mkdir\");\n\nmodule.exports.mkdirSync = function (path, options) {\n  var mode = 0o777;\n  var recursive = false;\n  if (options && options.mode) {\n    mode = options.mode;\n  }\n  if (options && options.recursive) {\n    recursive = options.recursive;\n  }\n  if (typeof options === \"number\") {\n    mode = options;\n  }\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  fileManager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(\n    path,\n    recursive,\n    {\n      NSFilePosixPermissions: mode,\n    },\n    err\n  );\n\n  if (err.value() !== null) {\n    throw new Error(err.value());\n  }\n};\n\nmodule.exports.mkdtemp = NOT_IMPLEMENTED(\"mkdtemp\");\n\nmodule.exports.mkdtempSync = function (path) {\n  function makeid() {\n    var text = \"\";\n    var possible =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 6; i++)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n  }\n  var tempPath = path + makeid();\n  module.exports.mkdirSync(tempPath);\n  return tempPath;\n};\n\nmodule.exports.open = NOT_IMPLEMENTED(\"open\");\nmodule.exports.openSync = NOT_IMPLEMENTED(\"openSync\");\n\nmodule.exports.read = NOT_IMPLEMENTED(\"read\");\n\nmodule.exports.readdir = NOT_IMPLEMENTED(\"readdir\");\n\nmodule.exports.readdirSync = function (path, options) {\n  var encoding = encodingFromOptions(options, \"utf8\");\n  var fileManager = NSFileManager.defaultManager();\n  var paths = fileManager.subpathsAtPath(path);\n  var arr = [];\n  for (var i = 0; i < paths.length; i++) {\n    var pathName = paths[i];\n    arr.push(encoding === \"buffer\" ? Buffer.from(pathName) : String(pathName));\n  }\n  return arr;\n};\n\nmodule.exports.readFile = NOT_IMPLEMENTED(\"readFile\");\n\nmodule.exports.readFileSync = function (path, options) {\n  var encoding = encodingFromOptions(options, \"buffer\");\n  var fileManager = NSFileManager.defaultManager();\n  var data = fileManager.contentsAtPath(path);\n  if (!data) {\n    throw fsErrorForPath(path, false);\n  }\n\n  var buffer = Buffer.from(data);\n\n  if (encoding === \"buffer\") {\n    return buffer;\n  } else if (encoding === \"NSData\") {\n    return buffer.toNSData();\n  } else {\n    return buffer.toString(encoding);\n  }\n};\n\nmodule.exports.readlink = NOT_IMPLEMENTED(\"readlink\");\n\nmodule.exports.readlinkSync = function (path) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var result = fileManager.destinationOfSymbolicLinkAtPath_error(path, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value());\n  }\n\n  return String(result);\n};\n\nmodule.exports.readSync = NOT_IMPLEMENTED(\"readSync\");\n\nmodule.exports.realpath = NOT_IMPLEMENTED(\"realpath\");\nmodule.exports.realpath.native = NOT_IMPLEMENTED(\"realpath.native\");\n\nmodule.exports.realpathSync = function (path) {\n  return String(\n    NSString.stringWithString(path).stringByResolvingSymlinksInPath()\n  );\n};\n\nmodule.exports.realpathSync.native = NOT_IMPLEMENTED(\"realpathSync.native\");\n\nmodule.exports.rename = NOT_IMPLEMENTED(\"rename\");\n\nmodule.exports.renameSync = function (oldPath, newPath) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  fileManager.moveItemAtPath_toPath_error(oldPath, newPath, err);\n\n  var error = err.value();\n\n  if (error !== null) {\n    // if there is already a file, we need to overwrite it\n    if (\n      String(error.domain()) === \"NSCocoaErrorDomain\" &&\n      Number(error.code()) === 516\n    ) {\n      var err2 = MOPointer.alloc().init();\n      fileManager.replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error(\n        NSURL.fileURLWithPath(newPath),\n        NSURL.fileURLWithPath(oldPath),\n        null,\n        NSFileManagerItemReplacementUsingNewMetadataOnly,\n        null,\n        err2\n      );\n      if (err2.value() !== null) {\n        throw fsErrorForPath(oldPath, undefined, err2.value());\n      }\n    } else {\n      throw fsErrorForPath(oldPath, undefined, error);\n    }\n  }\n};\n\nmodule.exports.rmdir = NOT_IMPLEMENTED(\"rmdir\");\n\nmodule.exports.rmdirSync = function (path) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var isDirectory = module.exports.lstatSync(path).isDirectory();\n  if (!isDirectory) {\n    throw fsError(\"ENOTDIR\", {\n      path: path,\n      syscall: \"rmdir\",\n    });\n  }\n  fileManager.removeItemAtPath_error(path, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, true, err.value(), \"rmdir\");\n  }\n};\n\nmodule.exports.stat = NOT_IMPLEMENTED(\"stat\");\n\n// the only difference with lstat is that we resolve symlinks\n//\n// > lstat() is identical to stat(), except that if pathname is a symbolic\n// > link, then it returns information about the link itself, not the file\n// > that it refers to.\n// http://man7.org/linux/man-pages/man2/lstat.2.html\nmodule.exports.statSync = function (path) {\n  return module.exports.lstatSync(module.exports.realpathSync(path));\n};\n\nmodule.exports.symlink = NOT_IMPLEMENTED(\"symlink\");\n\nmodule.exports.symlinkSync = function (target, path) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var result = fileManager.createSymbolicLinkAtPath_withDestinationPath_error(\n    path,\n    target,\n    err\n  );\n\n  if (err.value() !== null) {\n    throw new Error(err.value());\n  }\n};\n\nmodule.exports.truncate = NOT_IMPLEMENTED(\"truncate\");\n\nmodule.exports.truncateSync = function (path, len) {\n  var hFile = NSFileHandle.fileHandleForUpdatingAtPath(sFilePath);\n  hFile.truncateFileAtOffset(len || 0);\n  hFile.closeFile();\n};\n\nmodule.exports.unlink = NOT_IMPLEMENTED(\"unlink\");\n\nmodule.exports.unlinkSync = function (path) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var isDirectory = module.exports.lstatSync(path).isDirectory();\n  if (isDirectory) {\n    throw fsError(\"EPERM\", {\n      path: path,\n      syscall: \"unlink\",\n    });\n  }\n  var result = fileManager.removeItemAtPath_error(path, err);\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, false, err.value());\n  }\n};\n\nmodule.exports.unwatchFile = NOT_IMPLEMENTED(\"unwatchFile\");\n\nmodule.exports.utimes = NOT_IMPLEMENTED(\"utimes\");\n\nmodule.exports.utimesSync = function (path, aTime, mTime) {\n  var err = MOPointer.alloc().init();\n  var fileManager = NSFileManager.defaultManager();\n  var result = fileManager.setAttributes_ofItemAtPath_error(\n    {\n      NSFileModificationDate: aTime,\n    },\n    path,\n    err\n  );\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value());\n  }\n};\n\nmodule.exports.watch = NOT_IMPLEMENTED(\"watch\");\nmodule.exports.watchFile = NOT_IMPLEMENTED(\"watchFile\");\n\nmodule.exports.write = NOT_IMPLEMENTED(\"write\");\n\nmodule.exports.writeFile = NOT_IMPLEMENTED(\"writeFile\");\n\nmodule.exports.writeFileSync = function (path, data, options) {\n  var encoding = encodingFromOptions(options, \"utf8\");\n\n  var nsdata = Buffer.from(\n    data,\n    encoding === \"NSData\" || encoding === \"buffer\" ? undefined : encoding\n  ).toNSData();\n\n  nsdata.writeToFile_atomically(path, true);\n};\n\nmodule.exports.writeSync = NOT_IMPLEMENTED(\"writeSync\");\n","module.exports.parseStat = function parseStat(result) {\n  return {\n    dev: String(result.NSFileDeviceIdentifier),\n    // ino: 48064969, The file system specific \"Inode\" number for the file.\n    mode: result.NSFileType | result.NSFilePosixPermissions,\n    nlink: Number(result.NSFileReferenceCount),\n    uid: String(result.NSFileOwnerAccountID),\n    gid: String(result.NSFileGroupOwnerAccountID),\n    // rdev: 0, A numeric device identifier if the file is considered \"special\".\n    size: Number(result.NSFileSize),\n    // blksize: 4096, The file system block size for i/o operations.\n    // blocks: 8, The number of blocks allocated for this file.\n    atimeMs:\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    mtimeMs:\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    ctimeMs:\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    birthtimeMs:\n      Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000,\n    atime: new Date(\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5\n    ), // the 0.5 comes from the node source. Not sure why it's added but in doubt...\n    mtime: new Date(\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5\n    ),\n    ctime: new Date(\n      Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5\n    ),\n    birthtime: new Date(\n      Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000 + 0.5\n    ),\n    isBlockDevice: function () {\n      return result.NSFileType === NSFileTypeBlockSpecial;\n    },\n    isCharacterDevice: function () {\n      return result.NSFileType === NSFileTypeCharacterSpecial;\n    },\n    isDirectory: function () {\n      return result.NSFileType === NSFileTypeDirectory;\n    },\n    isFIFO: function () {\n      return false;\n    },\n    isFile: function () {\n      return result.NSFileType === NSFileTypeRegular;\n    },\n    isSocket: function () {\n      return result.NSFileType === NSFileTypeSocket;\n    },\n    isSymbolicLink: function () {\n      return result.NSFileType === NSFileTypeSymbolicLink;\n    },\n  };\n};\n\nvar ERRORS = {\n  EPERM: {\n    message: \"operation not permitted\",\n    errno: -1,\n  },\n  ENOENT: {\n    message: \"no such file or directory\",\n    errno: -2,\n  },\n  EACCES: {\n    message: \"permission denied\",\n    errno: -13,\n  },\n  ENOTDIR: {\n    message: \"not a directory\",\n    errno: -20,\n  },\n  EISDIR: {\n    message: \"illegal operation on a directory\",\n    errno: -21,\n  },\n};\n\nfunction fsError(code, options) {\n  var error = new Error(\n    code +\n      \": \" +\n      ERRORS[code].message +\n      \", \" +\n      (options.syscall || \"\") +\n      (options.path ? \" '\" + options.path + \"'\" : \"\")\n  );\n\n  Object.keys(options).forEach(function (k) {\n    error[k] = options[k];\n  });\n\n  error.code = code;\n  error.errno = ERRORS[code].errno;\n\n  return error;\n}\n\nmodule.exports.fsError = fsError;\n\nmodule.exports.fsErrorForPath = function fsErrorForPath(\n  path,\n  shouldBeDir,\n  err,\n  syscall\n) {\n  var fileManager = NSFileManager.defaultManager();\n  var doesExist = fileManager.fileExistsAtPath(path);\n  if (!doesExist) {\n    return fsError(\"ENOENT\", {\n      path: path,\n      syscall: syscall || \"open\",\n    });\n  }\n  var isReadable = fileManager.isReadableFileAtPath(path);\n  if (!isReadable) {\n    return fsError(\"EACCES\", {\n      path: path,\n      syscall: syscall || \"open\",\n    });\n  }\n  if (typeof shouldBeDir !== \"undefined\") {\n    var isDirectory = require(\"./index\").lstatSync(path).isDirectory();\n    if (isDirectory && !shouldBeDir) {\n      return fsError(\"EISDIR\", {\n        path: path,\n        syscall: syscall || \"read\",\n      });\n    } else if (!isDirectory && shouldBeDir) {\n      return fsError(\"ENOTDIR\", {\n        path: path,\n        syscall: syscall || \"read\",\n      });\n    }\n  }\n  return new Error(err || \"Unknown error while manipulating \" + path);\n};\n\nmodule.exports.encodingFromOptions = function encodingFromOptions(\n  options,\n  defaultValue\n) {\n  return options && options.encoding\n    ? String(options.encoding)\n    : options\n    ? String(options)\n    : defaultValue;\n};\n\nmodule.exports.NOT_IMPLEMENTED = function NOT_IMPLEMENTED(name) {\n  return function () {\n    throw new Error(\n      \"fs.\" +\n        name +\n        \" is not implemented yet. If you feel like implementing it, any contribution will be gladly accepted on https://github.com/skpm/fs\"\n    );\n  };\n};\n","/* from https://github.com/taylorhakes/promise-polyfill */\n\nfunction promiseFinally(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nfunction noop() {}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError(\"Promises must be constructed via new\");\n  if (typeof fn !== \"function\") throw new TypeError(\"not a function\");\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError(\"A promise cannot be resolved with itself.\");\n    if (\n      newValue &&\n      (typeof newValue === \"object\" || typeof newValue === \"function\")\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === \"function\") {\n        doResolve(then.bind(newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value, self);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === \"function\" ? onFulfilled : null;\n  this.onRejected = typeof onRejected === \"function\" ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) {\n          Promise._multipleResolvesFn(\"resolve\", self, value);\n          return;\n        }\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) {\n          Promise._multipleResolvesFn(\"reject\", self, reason);\n          return;\n        }\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) {\n      Promise._multipleResolvesFn(\"reject\", self, ex);\n      return;\n    }\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype[\"catch\"] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype[\"finally\"] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!Array.isArray(arr)) {\n      return reject(new TypeError(\"Promise.all accepts an array\"));\n    }\n\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === \"object\" || typeof val === \"function\")) {\n          var then = val.then;\n          if (typeof then === \"function\") {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === \"object\" && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!Array.isArray(arr)) {\n      return reject(new TypeError(\"Promise.race accepts an array\"));\n    }\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      Promise.resolve(arr[i]).then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn = setImmediate;\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err, promise) {\n  if (\n    typeof process !== \"undefined\" &&\n    process.listenerCount &&\n    (process.listenerCount(\"unhandledRejection\") ||\n      process.listenerCount(\"uncaughtException\"))\n  ) {\n    process.emit(\"unhandledRejection\", err, promise);\n    process.emit(\"uncaughtException\", err, \"unhandledRejection\");\n  } else if (typeof console !== \"undefined\" && console) {\n    console.warn(\"Possible Unhandled Promise Rejection:\", err);\n  }\n};\n\nPromise._multipleResolvesFn = function _multipleResolvesFn(\n  type,\n  promise,\n  value\n) {\n  if (typeof process !== \"undefined\" && process.emit) {\n    process.emit(\"multipleResolves\", type, promise, value);\n  }\n};\n\nmodule.exports = Promise;\n","import {\n    argbFromHex,\n    hexFromArgb,\n    themeFromSourceColor,\n    applyTheme,\n    TonalPalette,\n    HCT,\n} from \"@material/material-color-utilities\";\nimport { isDeepStrictEqual } from \"util\";\n\nimport { resolve } from \"path\";\nconst fs = require(\"@skpm/fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst desktopDir = path.join(os.homedir(), \"Desktop\");\n\n// #region Sketch Items\nconst sketch = require(\"sketch\");\nconst Swatch = sketch.Swatch;\nconst Style = require(\"sketch/dom\").Style;\n\n// Document variables\nvar doc = context.document;\nvar document = sketch.getSelectedDocument();\nvar firstSelectedLayer = document.selectedLayers.layers[0];\nvar artboard = sketch.Artboard;\nvar data = document.sketchObject.documentData();\nvar image = sketch.Image;\n// #endregion\n\n// #region Styles Variables\nvar layerStyles = document.sharedLayerStyles;\nvar textStyles = document.sharedTextStyles;\nvar arrayLayerStyleIDs = layerStyles.map((sharedstyle) => sharedstyle[\"id\"]);\nvar arrayLayerStyleNames = layerStyles.map(\n    (sharedstyle) => sharedstyle[\"name\"]\n);\nvar arrayLayerStyleStyles = layerStyles.map(\n    (sharedstyle) => sharedstyle[\"style\"]\n);\nvar layerStylesOrdered = [...document.sharedLayerStyles].sort(\n    (left, right) => left.name > right.name\n);\n\nvar arrayTextStyleIDs = textStyles.map((sharedstyle) => sharedstyle[\"id\"]);\nvar arrayTextStyleNames = textStyles.map((sharedstyle) => sharedstyle[\"name\"]);\nvar arrayTextStyleStyles = textStyles.map(\n    (sharedstyle) => sharedstyle[\"style\"]\n);\nvar textStylesOrdered = [...document.sharedTextStyles].sort(\n    (left, right) => left.name > right.name\n);\nvar stylesString = JSON.stringify(layerStylesOrdered);\nvar textString = JSON.stringify(textStylesOrdered);\n// #endregion\n\nexport default function () {\n    const defaultColor = \"#f82506\";\n\n    // #region Theme\n    const theme = themeFromSourceColor(argbFromHex(defaultColor), [\n        // {\n        //     name: \"custom-1\",\n        //     value: argbFromHex(\"#ff0000\"),\n        //     blend: true,\n        // },\n        {},\n    ]);\n    // #endregion Theme\n\n    // #region Colors and palettes creation\n    const primary = [\"Primary\", defaultColor];\n    const secondary = [\"Secondary\", hexFromArgb(theme.schemes.light.secondary)];\n    const tertiary = [\"Tertiary\", hexFromArgb(theme.schemes.light.tertiary)];\n    const error = [\"Error\", hexFromArgb(theme.schemes.light.error)];\n    const neutral = [\"Neutral\", hexFromArgb(theme.schemes.light.neutral)];\n    const neutralVariant = [\n        \"Neutral Variant\",\n        hexFromArgb(theme.schemes.light.neutralVariant),\n    ];\n    const shadow = [\"Shadow\", hexFromArgb(theme.schemes.light.shadow)];\n    const scrim = [\"Scrim\", hexFromArgb(theme.schemes.light.scrim)];\n\n    const primaryPalette = colorPalette(primary[1], primary[0]);\n    paletteToColorVariables(primaryPalette, \"Primary\");\n    const secondaryPalette = colorPalette(secondary[1], secondary[0]);\n    paletteToColorVariables(secondaryPalette, \"Secondary\");\n    const tertiaryPalette = colorPalette(tertiary[1], tertiary[0]);\n    paletteToColorVariables(tertiaryPalette, \"Tertiary\");\n    const errorPalette = colorPalette(error[1], error[0]);\n    paletteToColorVariables(errorPalette, \"Error\");\n    const neutralPalette = colorPalette(neutral[1], neutral[0]);\n    paletteToColorVariables(neutralPalette, \"Neutral\");\n    const neutralVariantPalette = colorPalette(\n        neutralVariant[1],\n        neutralVariant[0]\n    );\n    paletteToColorVariables(neutralVariantPalette, \"Neutral Variant\");\n    const shadowPalette = colorPalette(shadow[1], shadow[0]);\n    paletteToColorVariables(shadowPalette, \"Shadow\");\n    const scrimPalette = colorPalette(scrim[1], scrim[0]);\n    paletteToColorVariables(scrimPalette, \"Scrim\");\n    // #endregion Colors and palettes creation\n\n    // #region Light theme\n    const lightTheme_primary = hexFromArgb(theme.schemes.light.primary);\n    const lightTheme_onPrimary = hexFromArgb(theme.schemes.light.onPrimary);\n    const lightTheme_primaryContainer = hexFromArgb(\n        theme.schemes.light.primaryContainer\n    );\n    const lightTheme_onPrimaryContainer = hexFromArgb(\n        theme.schemes.light.onPrimaryContainer\n    );\n    const lightTheme_secondary = hexFromArgb(theme.schemes.light.secondary);\n    const lightTheme_onSecondary = hexFromArgb(theme.schemes.light.onSecondary);\n    const lightTheme_secondaryContainer = hexFromArgb(\n        theme.schemes.light.secondaryContainer\n    );\n    const lightTheme_onSecondaryContainer = hexFromArgb(\n        theme.schemes.light.onSecondaryContainer\n    );\n    const lightTheme_tertiary = hexFromArgb(theme.schemes.light.tertiary);\n    const lightTheme_onTertiary = hexFromArgb(theme.schemes.light.onTertiary);\n    const lightTheme_tertiaryContainer = hexFromArgb(\n        theme.schemes.light.tertiaryContainer\n    );\n    const lightTheme_onTertiaryContainer = hexFromArgb(\n        theme.schemes.light.onTertiaryContainer\n    );\n    const lightTheme_error = hexFromArgb(theme.schemes.light.error);\n    const lightTheme_onError = hexFromArgb(theme.schemes.light.onError);\n    const lightTheme_errorContainer = hexFromArgb(\n        theme.schemes.light.errorContainer\n    );\n    const lightTheme_onErrorContainer = hexFromArgb(\n        theme.schemes.light.onErrorContainer\n    );\n    const lightTheme_background = hexFromArgb(theme.schemes.light.background);\n    const lightTheme_onbackground = hexFromArgb(\n        theme.schemes.light.onbackground\n    );\n    const lightTheme_surface = hexFromArgb(theme.schemes.light.surface);\n    const lightTheme_onSurface = hexFromArgb(theme.schemes.light.onSurface);\n    const lightTheme_outline = hexFromArgb(theme.schemes.light.onbackground);\n    const lightTheme_surfacevariant = hexFromArgb(\n        theme.schemes.light.surfaceVariant\n    );\n    const lightTheme_onSurfaceVariant = hexFromArgb(\n        theme.schemes.light.onSurfaceVariant\n    );\n    const lightTheme_shadow = hexFromArgb(theme.schemes.light.shadow);\n    const lightTheme_scrim = hexFromArgb(theme.schemes.light.scrim);\n    const lightTheme_inverseSurface = hexFromArgb(\n        theme.schemes.light.inverseSurface\n    );\n    const lightTheme_inverseOnSurface = hexFromArgb(\n        theme.schemes.light.inverseOnSurface\n    );\n    const lightTheme_inversePrimary = hexFromArgb(\n        theme.schemes.light.inversePrimary\n    );\n\n    const lightTheme = [\n        [\"Primary\", lightTheme_primary, true, false, true, true, false],\n        [\"onPrimary\", lightTheme_onPrimary, true, false, true, true, true],\n        [\n            \"primaryContainer\",\n            lightTheme_primaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onPrimaryContainer\",\n            lightTheme_onPrimaryContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"secondary\", lightTheme_secondary, true, false, true, true, false],\n        [\"onSecondary\", lightTheme_onSecondary, true, false, true, true, false],\n        [\n            \"secondaryContainer\",\n            lightTheme_secondaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onSecondaryContainer\",\n            lightTheme_onSecondaryContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"tertiary\", lightTheme_tertiary, true, false, true, true, false],\n        [\"onTertiary\", lightTheme_onTertiary, true, false, true, true, false],\n        [\n            \"tertiaryContainer\",\n            lightTheme_tertiaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onTertiaryContainer\",\n            lightTheme_onTertiaryContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"error\", lightTheme_error, true, false, true, true, false],\n        [\"onError\", lightTheme_onError, true, false, true, true, true],\n        [\n            \"errorContainer\",\n            lightTheme_errorContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onErrorContainer\",\n            lightTheme_onErrorContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"background\", lightTheme_background, true, false, true, false, false],\n        [\n            \"onbackground\",\n            lightTheme_onbackground,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\"surface\", lightTheme_surface, true, false, true, false, false],\n        [\"onSurface\", lightTheme_onSurface, true, false, true, true, true],\n        [\"outline\", lightTheme_outline, false, true, true, false, false],\n        [\n            \"surfacevariant\",\n            lightTheme_surfacevariant,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onSurfaceVariant\",\n            lightTheme_onSurfaceVariant,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\"shadow\", lightTheme_shadow, true, false, true, false, false],\n        // [\"scrim\", lightTheme_scrim,false],\n        [\n            \"inverseSurface\",\n            lightTheme_inverseSurface,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"inverseOnSurface\",\n            lightTheme_inverseOnSurface,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\n            \"inversePrimary\",\n            lightTheme_inversePrimary,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n    ];\n    // #endregion Light Theme\n\n    // #region Dark theme\n    const darkTheme_primary = hexFromArgb(theme.schemes.dark.primary);\n    const darkTheme_onPrimary = hexFromArgb(theme.schemes.dark.onPrimary);\n    const darkTheme_primaryContainer = hexFromArgb(\n        theme.schemes.dark.primaryContainer\n    );\n    const darkTheme_onPrimaryContainer = hexFromArgb(\n        theme.schemes.dark.onPrimaryContainer\n    );\n    const darkTheme_secondary = hexFromArgb(theme.schemes.dark.secondary);\n    const darkTheme_onSecondary = hexFromArgb(theme.schemes.dark.onSecondary);\n    const darkTheme_secondaryContainer = hexFromArgb(\n        theme.schemes.dark.secondaryContainer\n    );\n    const darkTheme_onSecondaryContainer = hexFromArgb(\n        theme.schemes.dark.onSecondaryContainer\n    );\n    const darkTheme_tertiary = hexFromArgb(theme.schemes.dark.tertiary);\n    const darkTheme_onTertiary = hexFromArgb(theme.schemes.dark.onTertiary);\n    const darkTheme_tertiaryContainer = hexFromArgb(\n        theme.schemes.dark.tertiaryContainer\n    );\n    const darkTheme_onTertiaryContainer = hexFromArgb(\n        theme.schemes.dark.onTertiaryContainer\n    );\n    const darkTheme_error = hexFromArgb(theme.schemes.dark.error);\n    const darkTheme_onError = hexFromArgb(theme.schemes.dark.onError);\n    const darkTheme_errorContainer = hexFromArgb(\n        theme.schemes.dark.errorContainer\n    );\n    const darkTheme_onErrorContainer = hexFromArgb(\n        theme.schemes.dark.onErrorContainer\n    );\n    const darkTheme_background = hexFromArgb(theme.schemes.dark.background);\n    const darkTheme_onbackground = hexFromArgb(theme.schemes.dark.onbackground);\n    const darkTheme_surface = hexFromArgb(theme.schemes.dark.surface);\n    const darkTheme_onSurface = hexFromArgb(theme.schemes.dark.onSurface);\n    const darkTheme_outline = hexFromArgb(theme.schemes.dark.onbackground);\n    const darkTheme_surfacevariant = hexFromArgb(\n        theme.schemes.dark.surfaceVariant\n    );\n    const darkTheme_onSurfaceVariant = hexFromArgb(\n        theme.schemes.dark.onSurfaceVariant\n    );\n    const darkTheme_shadow = hexFromArgb(theme.schemes.dark.shadow);\n    const darkTheme_scrim = hexFromArgb(theme.schemes.dark.scrim);\n    const darkTheme_inverseSurface = hexFromArgb(\n        theme.schemes.dark.inverseSurface\n    );\n    const darkTheme_inverseOnSurface = hexFromArgb(\n        theme.schemes.dark.inverseOnSurface\n    );\n    const darkTheme_inversePrimary = hexFromArgb(\n        theme.schemes.dark.inversePrimary\n    );\n\n    const darkTheme = [\n        [\"Primary\", darkTheme_primary, true, false, true, true, false],\n        [\"onPrimary\", darkTheme_onPrimary, true, false, true, true, true],\n        [\n            \"primaryContainer\",\n            darkTheme_primaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onPrimaryContainer\",\n            darkTheme_onPrimaryContainer,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\"secondary\", darkTheme_secondary, true, false, true, true, false],\n        [\"onSecondary\", darkTheme_onSecondary, true, false, true, true, false],\n        [\n            \"secondaryContainer\",\n            darkTheme_secondaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onSecondaryContainer\",\n            darkTheme_onSecondaryContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"tertiary\", darkTheme_tertiary, true, false, true, true, false],\n        [\"onTertiary\", darkTheme_onTertiary, true, false, true, true, false],\n        [\n            \"tertiaryContainer\",\n            darkTheme_tertiaryContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onTertiaryContainer\",\n            darkTheme_onTertiaryContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"error\", darkTheme_error, true, false, true, true, false],\n        [\"onError\", darkTheme_onError, true, false, true, true, true],\n        [\n            \"errorContainer\",\n            darkTheme_errorContainer,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onErrorContainer\",\n            darkTheme_onErrorContainer,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n        [\"background\", darkTheme_background, true, false, true, false, false],\n        [\"onBackground\", darkTheme_onbackground, true, false, true, true, true],\n        [\"surface\", darkTheme_surface, true, false, true, false, false],\n        [\"onSurface\", darkTheme_onSurface, true, false, true, true, true],\n        [\"outline\", darkTheme_outline, false, true, true, false, false],\n        [\n            \"surfacevariant\",\n            darkTheme_surfacevariant,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"onSurfaceVariant\",\n            darkTheme_onSurfaceVariant,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\"shadow\", darkTheme_shadow, true, false, true, false, false],\n        // [\"scrim\", darkTheme_scrim,false,false,false],\n        [\n            \"inverseSurface\",\n            darkTheme_inverseSurface,\n            true,\n            false,\n            true,\n            false,\n            false,\n        ],\n        [\n            \"inverseOnSurface\",\n            darkTheme_inverseOnSurface,\n            true,\n            false,\n            true,\n            true,\n            true,\n        ],\n        [\n            \"inversePrimary\",\n            darkTheme_inversePrimary,\n            true,\n            false,\n            true,\n            true,\n            false,\n        ],\n    ];\n    // #endregion Dark Theme\n\n    // #region Create Styles\n    // Light and Dark theme arrays presents:\n    // 0 = styleName\n    // 1 = color\n    // 2 = fill\n    // 3 = border\n    // 4 = layer style\n    // 5 = text style\n    // 6 = titles\n    lightTheme.forEach((style) => {\n        //  If layer style\n        if (style[4]) {\n            // Fill style\n            if (style[2]) {\n                createNewLayerStyle(style, \"Light Theme/Fills/\", false);\n            }\n            //  Border Style\n            if (style[3]) {\n                createNewLayerStyle(style, \"Light Theme/Borders/\", true);\n            }\n        }\n        //  If text style\n        if (style[5]) {\n            createNewTextStyle(style, \"Light Theme/\");\n        }\n    });\n    darkTheme.forEach((style) => {\n        //  If layer style\n        if (style[4]) {\n            // Fill style\n            if (style[2]) {\n                createNewLayerStyle(style, \"Dark Theme/Fills/\", false);\n            }\n            //  Border Style\n            if (style[3]) {\n                createNewLayerStyle(style, \"Dark Theme/Borders/\", true);\n            }\n        }\n        //  If text style\n        if (style[5]) {\n            createNewTextStyle(style, \"Dark Theme/\");\n        }\n    });\n    // #endregion Create Styles\n\n    console.log(JSON.stringify(theme, null, 2));\n\n    function paletteToColorVariables(palette, name) {\n        let arrayColorVarNames = document.swatches.map(\n            (Swatch) => Swatch[\"name\"]\n        );\n        palette.forEach((color) => {\n            let colorName = name + \"/\" + color[0];\n            let newSwatch = Swatch.from({\n                name: colorName,\n                color: color[1],\n            });\n\n            // Generate the new Color Variable if it doesn't exist\n            if (arrayColorVarNames.length > 0) {\n                if (arrayColorVarNames.indexOf(colorName) === -1) {\n                    document.swatches.push(newSwatch);\n                }\n            } else {\n                document.swatches.push(newSwatch);\n            }\n        });\n    }\n}\n\nfunction colorPalette(color, name = \"\") {\n    let tones = [100, 99, 95, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0];\n    // let palette = [[name, color]];\n    let palette = [];\n    for (let n = 0; n < tones.length; n++) {\n        let valueName = name + \" \" + tones[n].toString();\n        palette.push([\n            valueName,\n            hexFromArgb(\n                TonalPalette.fromInt(argbFromHex(color)).tone(tones[n])\n            ),\n        ]);\n    }\n    return palette;\n}\n\n// ******************************************************************* //\n// General Styles management functions                                 //\n// ******************************************************************* //\n\nfunction getLayerStyleNameFromID(id) {\n    let styleName = \"\";\n    for (let i = 0; i < arrayLayerStyleNames.length; i++) {\n        if (arrayLayerStyleIDs[i] === id) {\n            styleName = arrayLayerStyleNames[i];\n        }\n    }\n    return styleName;\n}\n\nfunction getTextStyleNameFromID(id) {\n    try {\n        let textStyle = \"\";\n        for (let i = 0; i < arrayTextStyleStyles.length; i++) {\n            if (arrayTextStyleIDs[i] === id) {\n                textStyle = arrayTextStyleStyles[i];\n            }\n        }\n        return textStyle;\n    } catch (getTextStylesStyleFromIDErr) {\n        console.log(getTextStylesStyleFromIDErr);\n    }\n}\n\nfunction getLayerStyleIDFromName(name) {\n    let styleID = \"\";\n    for (let i = 0; i < arrayLayerStyleIDs.length; i++) {\n        if (arrayLayerStyleNames[i] === name) {\n            styleID = arrayLayerStyleIDs[i];\n        }\n    }\n    return styleID;\n}\n\nfunction getTextStyleIDFromName(name) {\n    let styleID = \"\";\n    for (let i = 0; i < arrayTextStyleIDs.length; i++) {\n        if (arrayTextStyleNames[i] === name) {\n            styleID = arrayTextStyleIDs[i];\n        }\n    }\n    return styleID;\n}\n\nfunction createNewLayerStyle(styleDetails = [], folder = \"\", border = false) {\n    try {\n        let styleName = folder + styleDetails[0];\n        let styleColor = styleDetails[1];\n        if (arrayLayerStyleNames.indexOf(styleName) === -1) {\n            let borders = [];\n            let fills = [];\n            if (border) {\n                borders = [\n                    {\n                        color: styleColor,\n                        fillType: Style.FillType.Color,\n                        position: Style.BorderPosition.Inside,\n                    },\n                ];\n            } else {\n                fills = [\n                    {\n                        color: styleColor,\n                        fillType: Style.FillType.Color,\n                    },\n                ];\n            }\n            let sharedStyle = layerStyles.push({\n                name: styleName,\n                style: {\n                    fills: fills,\n                    borders: borders,\n                },\n                document: document,\n            });\n            updateLayerStyles();\n\n            return sharedStyle;\n        }\n    } catch (createLayerStyleErr) {\n        console.log(createLayerStyleErr);\n    }\n}\n\nfunction createNewTextStyle(styleDetails = [], folder = \"\") {\n    try {\n        let styleName = folder + styleDetails[0];\n        let styleColor = styleDetails[1];\n        if (arrayTextStyleNames.indexOf(styleName) === -1) {\n            let sharedStyle = textStyles.push({\n                name: styleName,\n                style: {\n                    fills: {},\n                    borders: {},\n                    textColor: styleColor,\n                    fontSize: 16,\n                    fontFamily: \"Roboto\",\n                    fontWeight: 5,\n                },\n                document: document,\n            });\n            updateTextStyles();\n        }\n        // Titles\n        if (styleDetails[6]) {\n            styleName = folder + \"H1/\" + styleDetails[0];\n            if (arrayTextStyleNames.indexOf(styleName) === -1) {\n                let sharedTitleStyle = textStyles.push({\n                    name: styleName,\n                    style: {\n                        fills: {},\n                        borders: {},\n                        textColor: styleColor,\n                        fontSize: 28,\n                        fontFamily: \"Roboto\",\n                        fontWeight: 7,\n                    },\n                    document: document,\n                });\n                updateTextStyles();\n            }\n        }\n    } catch (createTextStyleErr) {\n        console.log(createTextStyleErr);\n    }\n}\n\nfunction updateLayerStyles() {\n    layerStyles = document.sharedLayerStyles;\n    arrayLayerStyleIDs = layerStyles.map((sharedstyle) => sharedstyle[\"id\"]);\n    arrayLayerStyleNames = layerStyles.map(\n        (sharedstyle) => sharedstyle[\"name\"]\n    );\n    arrayLayerStyleStyles = layerStyles.map(\n        (sharedstyle) => sharedstyle[\"style\"]\n    );\n}\n\nfunction updateTextStyles() {\n    let textStyles = document.sharedTextStyles;\n    arrayTextStyleIDs = textStyles.map((sharedstyle) => sharedstyle[\"id\"]);\n    arrayTextStyleNames = textStyles.map((sharedstyle) => sharedstyle[\"name\"]);\n    arrayTextStyleStyles = textStyles.map(\n        (sharedstyle) => sharedstyle[\"style\"]\n    );\n}\n","module.exports = require(\"buffer\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"sketch\");","module.exports = require(\"sketch/dom\");","module.exports = require(\"util\");"],"sourceRoot":""}